---
n0kada:
  title: Keynote
  type: keynote
  language: JA
  description: Nobu's keynote speech
  speakers:
  - id: n0kada
  materials:
    - title: Making Ruby? ゆるふわRuby生活
      url: https://slide.rabbit-shocker.org/authors/nobu/rubykaigi-2017/
  video:
    youtube_id: Bt-PvFLbMbU
ko1:
  title: Fiber in the 10th year
  type: presentation
  language: JA
  description: |-
    10 years ago I introduced new class Fiber into Ruby 1.9 as  (semi-)coroutine.

    Fiber is a powerful tool to make generators and self managing context switching scheduler. Recently we receive a new proposal "auto-Fiber" to use Fiber aggressively in asynchronous operations.

    In this talk, I will introduce a Fiber itself and a brief histroy of Fiber implementations. What is coroutine and semi-coroutine? Why we need to require 'fiber' library to use `Fiber#transfer`? How to implement fibers and how to speed up them? Also I introduce new proposal "auto-Fiber" and this discussion.
  speakers:
  - id: ko1
  materials:
    - title: Fiber in the 10th year
      url: https://www.slideshare.net/KoichiSasada/fiber-in-the-10th-year
  video:
    youtube_id: pgFx8DFjN8M
onk:
  title: API Development in 2017
  type: presentation
  language: JA
  description: |-
    Summarize "How to develop API server efficiently."

    This talk will talk while looking back on the history like

    * Why REST (RESTful API) was born?
    * The world has became to need Native client / Web front-end
    * API documentation tool are widely used
       * API Blueprint, Swagger, RAML, JSON Hyper-Schema
       * Schema driven development
    * API Query Language (GraphQL)'s birth

    And I talk about the library concept and code that we implemented as necessary.
    There were many challenges such as how to communicate at the interface boundary, how to implement without any mistakes, etc.
  speakers:
  - id: onk
  video:
    youtube_id: a28jJ62ZfZM
matschaffer:
  title: Mapping your world with Ruby
  type: presentation
  language: EN
  description: |-
    In the wake of the March 2011 earthquake, many noticed a lack of good environmental data regarding radiation. The Safecast project was born from that need and our Ruby-based infrastructure how is home to nearly 70 million data points.

    In this talk we'll go over the basics of the project, what we've learned over the last 6 years of running a volunteer-based Ruby project, and our plans for future expansion into tracking both radiation and air quality data.
  speakers:
  - id: matschaffer
  materials:
    - title: Mapping your world with Ruby
      url: https://speakerdeck.com/matschaffer/rubykaigi-2017-mapping-your-world-with-ruby
  video:
    youtube_id: Qk3VSCDZITs
codefolio:
  title: How Close is Ruby 3x3 For Production Web Apps?
  type: presentation
  language: EN
  description: How much faster is current Ruby than Ruby 2.0 for a production web
    application? Let's look at a mixed workload in the real commercial Discourse forum
    software. We'll see how the speed has changed overall. We'll also examine slow
    requests, garbage collection, warmup iterations and more. You'll see how to use
    this benchmark to test your own Ruby optimizations.
  speakers:
  - id: codefolio
  materials:
    - title: How Close Is Ruby 3x3 for Real Web Apps?
      url: http://bit.ly/kaigi2017-gibbs
  video:
    youtube_id: xZ5mw3x2pdo
shugomaeda:
  title: Handling mails on a text editor
  type: presentation
  language: JA
  description: |-
    A text editor is perfect for mail handling because mails consist of text.  Ruby is perfect for text editing because it's so powerful.

    In this talk, I introduce [Textbringer](https://github.com/shugo/textbringer), a text editor written in Ruby, and [Mournmail](https://github.com/shugo/mournmail), a message user agent implemented as a plugin of Textbringer, and I tells the fun of text editing and mail handling.

    I also talk about Law, Chaos, and the Cosmic Balance through the design and implementation of Textbringer and Mournmail.
  speakers:
  - id: shugomaeda
  materials:
    - title: Handling mails on a text editor
      url: https://github.com/shugo/RubyKaigi2017/blob/master/README.md
  video:
    youtube_id: pvSOWiVB-KA
v0dro:
  title: C how to supercharge Ruby with Rubex
  type: presentation
  language: EN
  description: CRuby is still one of the most popular Ruby interpreters in use today,
    but it lacks speed. In this talk you will be introduced to Rubex - a new programming
    language that compiles to C, looks almost exactly like Ruby and is specifically
    designed for supercharging your Ruby code with minimal effort.
  speakers:
  - id: v0dro
  materials:
    - title: Ruby Kaigi 2017 - C how to supercharge your Ruby with Rubex
      url: https://speakerdeck.com/v0dro/ruby-kaigi-2017-c-how-to-supercharge-your-ruby-with-rubex
  video:
    youtube_id: pZSuuyiQNZk
youchan:
  title: dRuby on Browser
  type: presentation
  language: JA
  description: |-
    I implemented dRuby on Browser with [Opal](http://opalrb.org/)(a JavaScript to Ruby source code compiler).
    Browser communicate with WebSocket to the server.
    The clients transparently access the server-side objects through the distributed objects.
    Also, by sharing the server-side objects among multiple clients, it can be applied to collaborative applications like Google Apps.
    This talk will explain the implementation of [dRuby on Opal](https://github.com/youchan/opal-drb) and demonstrate the collaborative application.
  speakers:
  - id: youchan
  materials:
    - title: dRuby on Browser
      url: https://youchan.github.io/RubyKaigi2017/
  video:
    youtube_id: Tgq5GhagmcU
hsbt:
  title: Gemification for Ruby 2.5/3.0
  type: presentation
  language: JA
  description: |-
    Ruby have many libraries named standard library, extension and default
    gems, bundled gems. These are some differences under the bundler and
    rails application.

    default gems and bundled gems are introduced to resolve dependency
    problem and development ecosystem around the ruby core. We have the
    plan to promote default/bundled gems from standard libraries. It says
    “Gemification” projects.

    What Gemification changes in Ruby ecosystem? In this presentation,
    from the standpoint of the maintainer of the Ruby programming
    language, I will explain details of Gemification and its blocker
    things. Finally, I will also introduce the new features of Ruby 2.5
    and 3.0.
  speakers:
  - id: hsbt
  materials:
    - title: Gemification for Ruby 2.5/3.0
      url: https://www.slideshare.net/hsbt/gemification-for-ruby-2530
  video:
    youtube_id: VKm93Mwe__k
kddeisz:
  title: Compiling Ruby
  type: presentation
  language: EN
  description: Since Ruby 2.3 and the introduction of `RubyVM::InstructionSequence::load_iseq`,
    we've been able to programmatically load ruby bytecode. By divorcing the process
    of running YARV byte code from the process of compiling ruby code, we can take
    advantage of the strengths of the ruby virtual machine while simultaneously reaping
    the benefits of a compiler such as macros, type checking, and instruction sequence
    optimizations. This can make our ruby faster and more readable! This talk demonstrates
    how to integrate this into your own workflows and the exciting possibilities this
    enables.
  speakers:
  - id: kddeisz
  materials:
    - title: Compiling Ruby
      url: https://speakerdeck.com/kddnewton/compiling-ruby
  video:
    youtube_id: B3Uf-aHZwmw
juliancheal:
  title: Do Androids Dream of Electronic Dance Music?
  type: presentation
  language: EN
  description: 'AI is everywhere in our lives these days: recommending our TV shows,
    planning our car trips, and running our day-to-day lives through artificially
    intelligent assistants like Siri and Alexa. But are machines capable of creativity?
    Can they write poems, paint pictures, or compose music that moves human audiences?
    We believe they can! In this talk, we’ll use Ruby and cutting-edge machine learning
    tools to train a neural network on human-generated Electronic Dance Music (EDM),
    then see what sorts of music the machine dreams up.'
  speakers:
  - id: juliancheal
  - id: ericqweinstein
  video:
    youtube_id: OfDBRfmVFHk
watson1978:
  title: How to optimize Ruby internal.
  type: presentation
  language: JA
  description: |-
    "Ruby 3" has aimed to optimize performance which is one of goals to release.
    I have made some patches to optimize Ruby internal to realize it.

    This talk describes how optimized Ruby internal at Ruby 2.5.
  speakers:
  - id: watson1978
  materials:
    - title: How to optimize Ruby internal
      url: https://speakerdeck.com/watson/how-to-optimize-ruby-internal
  video:
    youtube_id: 4VOEdd-BYHE
anton_davydov:
  title: Hanami - New Ruby Web Framework
  type: presentation
  language: EN
  description: The hanami is quite new and interesting framework which you are unlikely
    to write complex applications. But this does not mean that this framework is not
    worth your attention. Besides old approaches, you can also find new interesting
    solutions.
  speakers:
  - id: anton_davydov
  materials:
    - title: viewing ruby blossom kaigi2017
      url: https://speakerdeck.com/davydovanton/viewing-ruby-blossom-kaigi2017
  video:
    youtube_id: aYboQzyIoPc
mrkn:
  title: Development of Data Science Ecosystem for Ruby
  type: presentation
  language: JA
  description: |-
    The importance of data analysis in business is increasing day by day.
    Considering the future of Ruby which is often adopted as the development of business systems, it is an urgent task to make this programming language available in datascience.

    By the appearance of PyCall, Ruby has became able to use mainstreem tools used in datascience such as pandas and matplotlib.
    However, in order to establish Ruby as a programming language that can be used in datascience, and to keep it in the future as well, there are many problems now, but only a very few developers are working on solving this problem.

    In this presentation, we will introduce what we'll need in the future to establish Ruby as a programming language that can be used in data science.
    And we'll aim to stimulate Rubyists who are interested in this field, and to activate the development of the datascience ecosystem for Ruby by encouraging development of missing tools, documentation, and reporting on feeling of use and bugs.
  speakers:
  - id: mrkn
  materials:
    - title: Development of Data Science Ecosystem for Ruby
      url: https://speakerdeck.com/mrkn/development-of-data-science-ecosystem-for-ruby
  video:
    youtube_id: U9GdgZowmGY
narittan:
  title: mruby gateway for huge amount of realtime data processing
  type: presentation
  language: JA
  description: "TreasureData deals with huge amount of streaming data import request
    and saves them into our database in realtime without any lost. \nNew scalable
    system is required to process requests increasing day by day, and I decided to
    replace old system with rails and fluentd to new system with h2o and mruby for
    gateway server.\n\nI'll introduce why h2o and mruby is good and how I optimized
    mruby server handler for the system. In addition, I'll talk about my patches for
    h2o to make it possible for mruby parallel processing/asynchronous processing.
    And also, I'll show benchmarks of actual product."
  speakers:
  - id: narittan
  materials:
    - title: mruby gateway for huge amount of realtime data processing
      url: https://www.slideshare.net/RittaNarita/mruby-gateway-for-huge-amount-of-realtime-data-processing
  video:
    youtube_id: 7DuwISRyqGE
_st0012:
  title: 'I quit my job to write my own language: Goby'
  type: presentation
  language: EN
  description: |-
    That day, for no particular reason, I decided to write my own language. So I followed a [book](https://interpreterbook.com) and wrote the `monkey`. And when I wrote `monkey`, I thought maybe I'd create my own language. And when I created it, I thought maybe I'd just make it more like Ruby. And I figured, since I've spent so many time, maybe I'd just make it a VM-based language. And that's what I did. I wrote VM and compiler just like Ruby did in version 1.9. For no particular reason I just kept on going. I created file and http library. And when I made them, I figured, since I'd gone this far, I might as well add a web server. When I created the web server, I figured, since I'd gone this far, I might just quit my job and make it my own programming language: [Goby](https://github.com/goby-lang/goby)

    For leanring more about Goby, please also checkout our [Gitbook](https://www.gitbook.com/book/goby-lang/goby) (constantly updated!)
  speakers:
  - id: _st0012
  materials:
    - title: Goby and its compiler
      url: https://www.slideshare.net/LoStan/goby-and-its-compiler
  video:
    youtube_id: GRNlTWzoC74
rubylangorg:
  title: Ruby Committers vs the World
  type: discussion
  language: JA
  description: Live discussions and Q&A from the Ruby Core team
  speakers:
  - id: rubylangorg
  video:
    youtube_id: Vw36kmRmH5I
yukihiro_matz:
  title: Keynote
  type: keynote
  language: JA
  description: TBD
  speakers:
  - id: yukihiro_matz
  video:
    youtube_id: OnDSm-GZCko
mametter:
  title: An introduction and future of Ruby coverage library
  type: presentation
  language: JA
  description: Are you using code coverage?  As Ruby is a dynamic language and there
    is no standard static code checker yet, a good test suite is crucial to write
    a production-level Ruby code.  Code coverage is a measure of test goodness.  Therefore,
    it is also important to (properly) use code coverage to take a hint about whether
    your test suite is good enough or not yet (and if any, which modules are not tested
    well).  We talk an introduction to code coverage, types and usage of code coverage,
    the current status of Ruby `coverage` library, and some planned improvements towards
    Ruby 2.5.
  speakers:
  - id: mametter
  materials:
    - title: An introduction and future of Ruby coverage library
      url: https://www.slideshare.net/mametter/an-introduction-and-future-of-ruby-coverage-library
  video:
    youtube_id: zkP8pXOpiH0
yhara:
  title: Ruby, Opal and WebAssembly
  type: presentation
  language: JA
  description: |-
    WebAssembly is a state-of-the-art technology to run CPU intensive calculation on the browser. So how does it relate to Ruby? Well, for instance, you would like to use it while writing browser games, with Ruby.

    In this talk, I will introduce [DXOpal](https://github.com/yhara/dxopal), a game programming framework for Opal (Ruby-to-JavaScript compiler). DXOpal takes advantage of WebAssembly for complex calculations like collision detection.
  speakers:
  - id: yhara
  materials:
    - title: Ruby, Opal and WebAssembly
      url: https://speakerdeck.com/yhara/ruby-opal-and-webassembly
  video:
    youtube_id: bNTajEO_ndA
shioyama:
  title: The Ruby Module Builder Pattern
  type: presentation
  language: EN
  description: Did you know that Ruby has *configurable modules*? One of the most
    interesting features of Ruby, the [Module Builder Pattern](http://dejimata.com/2017/5/20/the-ruby-module-builder-pattern)
    is also probably its least well-known. Simply subclass the `Module` class, dynamically
    define some methods in an initializer, and boom, you can create named, customizable
    modules to include in other classes. In this talk, I'll explain how I've leveraged
    this unique feature of Ruby to build a translation gem called [Mobility](https://github.com/shioyama/mobility)
    that can handle a wide range of different storage strategies through a single,
    uniform interface.
  speakers:
  - id: shioyama
  materials:
    - title: The Ruby Module Builder Pattern
      url: https://speakerdeck.com/shioyama/the-ruby-module-builder-pattern
  video:
    youtube_id: _E1yKPC-r1E
ktou:
  title: 'Improve extension API: C++ as better language for extension'
  type: presentation
  language: JA
  description: |-
    This talk proposes better extension API.

    The current extension API is C API. In the past, some languages such as Rust ([RubyKaigi 2015](http://rubykaigi.org/2015/presentations/wycats_chancancode)), Go ([Oedo RubyKaigi 05](https://speakerdeck.com/naruse/writing-extension-libraries-in-go)), rubex ([RubyKaigi 2016](http://rubykaigi.org/2016/presentations/v0dro.html)) were proposed as languages to write extension.

    This talks proposes C++ as a better language for writing extension. Reasons:

      * C++ API can provide simpler API than C API.
      * C++ API doesn't need C bindings because C++ can use C API including macro natively. Other languages such as Rust and Go need C bindings.
      * Less API maintenance cost. Other approaches need more works for Ruby evolution such as introduces new syntax and new API.
  speakers:
  - id: ktou
  materials:
    - title: "Improve extension API: C++ as better language for extension"
      url: https://slide.rabbit-shocker.org/authors/kou/rubykaigi-2017/
  video:
    youtube_id: gfoizFzJ-oI
nishimotz:
  title: What visually impaired programmers are thinking about Ruby?
  type: presentation
  language: JA
  description: |-
    Computer programming is an important job opportunity for visually impaired people.
    Several colleges are educating Ruby programming to such students in Japan and overseas.
    This talk reveals the current situations of visually impaired Ruby programmers, especially in Japan,
    i.e. what they are developing, which tools or environments they are using, and whether they are satisfied or not regarding the Ruby language.
    Accessibility of documents, which are generated from Ruby sources via rdoc or yard, is one of the issue I found so far.
  speakers:
  - id: nishimotz
  materials:
    - title: Rubykaigi 2017-nishimotz-v6
      url: https://www.slideshare.net/nishimotz/rubykaigi-2017nishimotzv6
  video:
    youtube_id: O1coxtDTkwY
zverok:
  title: The Curious Case of Wikipedia Parsing
  type: presentation
  language: EN
  description: A case study of developing Wikipedia client/parser for structured information
    extraction, or How we are making entire world common knowledge information machine
    accessible (from Ruby). Includes investigation of parser development for semi-structured
    markup and semantic API design.
  speakers:
  - id: zverok
  materials:
    - title: The Curious Case Of Wikipedia Parsing
      url: https://docs.google.com/presentation/d/1r3xUjc9nXlwAOmgzCI26lELdNp8Mnsd5sfXa9JJwIME/edit#slide=id.p
  video:
    youtube_id: oqsX8kNq94I
rubymine:
  title: Automated Type Contracts Generation for Ruby
  type: presentation
  language: EN
  description: |-
    Beauty and power of Ruby and Rails pays us back when it comes to finding bugs in large codebases. Static analysis is hindered by magic DSLs and patches. We may annotate the code with YARD which also enables improved tooling such as code completion. Sadly, the benefits of this process rarely compensate for the effort.

    In this session we’ll see a new approach to type annotations generation. We'll learn how to obtain this data from runtime, to cope with DSLs and monkey patching, propose some tooling beyond YARD and create contracts like `(String, T) -> T`

    YARV hacking and minimized DFAs included.
  speakers:
  - id: rubymine
  materials:
    - title: Automated Type Contracts Generation
      url: https://speakerdeck.com/valich/automated-type-contracts-generation-1
    - title: goto.mov
      url: https://www.dropbox.com/s/bstt1inllswbihn/goto.mov
    - title: template_contracts.mov
      url: https://www.dropbox.com/s/noqdt9qofdgwhz1/template_contracts.mov
  video:
    youtube_id: JS6m2gke0Ic
duerst:
  title: Regular Expressions Inside Out
  type: presentation
  language: JA
  description: |-
    Regular expressions are a very important part of the toolkit of every Ruby programmer. This talk will help improve your understanding of regular expressions, including how to use them from Ruby, and how they are implemented.
    Examples will include things Ruby can do but other programming languages can't, huge regular expressions, substitutions that change as we go, and performance improvements for future Ruby versions.
  speakers:
  - id: duerst
  materials:
    - title: Regular Expressions Inside Out
      url: https://www.sw.it.aoyama.ac.jp/2017/pub/Ruby_Kaigi/
  video:
    youtube_id: sUdZ8s4GbnE
yuki24:
  title: Static Typo Checker in Ruby
  type: presentation
  language: EN
  description: "Since 2.3.0, Ruby comes with a dynamic typo checker called the did_you_mean
    gem, which helps find a bug caused by a typo. However, there's one argument against
    its design: it runs a naming check at runtime. \n\nSo what makes it difficult
    to implement a static typo checker? What are the technical challenges to build
    it? Is Type really necessary? In this talk, we'll discuss techniques for how to
    write a static typo checker by looking at examples that find an undefined method
    without running Ruby code. Join us to learn about the future of Ruby's typo checker."
  speakers:
  - id: yuki24
  materials:
    - title: Static typo checker
      url: https://speakerdeck.com/yuki24/static-typo-checker
  video:
    youtube_id: k9WEDRMvanM
soutaro:
  title: Type Checking Ruby Programs with Annotations
  type: presentation
  language: EN
  description: |-
    Type inference for Ruby programs is really difficult, and no one on earth has implemented successfully yet.

    Q: What if we write type annotations?<br>
    A: Much easier, but it is still not trivial.

    I will explain why they are difficult, how we can have a practical type checker for Ruby, and how the programming experience will be with types.
  speakers:
  - id: soutaro
  materials:
    - title: Type Checking Ruby Programs with Annotations
      url: https://speakerdeck.com/soutaro/type-checking-ruby-programs-with-annotations
  video:
    youtube_id: JExXdUux024
emorima:
  title: Serial Protocol Analyzer on Ruby
  type: presentation
  language: JA
  description: "It is easy to program serial communication on Ruby. (Thanks to greate
    useful gems.)  \nHowever it is difficult to judge whether there is a problem in
    either the sending program or the receiving program if data received cannot be
    successfully.\nTo solve the difficulty, let's analyze the data the sending program
    has written to the device.\n\nRubyでシリアル通信プログラムを書くのは簡単だ。\nしかしながら、正しくデータが受信できない場合に、送信側に問題があるのか、受信側に問題があるのかを判断するのが困難である。\nその困難さを解決するために、送信プログラムがデバイスに書き込みしたデータをRubyで解析してみよう。"
  speakers:
  - id: emorima
  materials:
    - title: Serial Protocol Analyzer on Ruby at RubyKaigi2017
      url: https://speakerdeck.com/emorima/serial-protocol-analyzer-on-ruby-at-rubykaigi2017
  video:
    youtube_id: E6LpGzrYWRc
codefinger:
  title: Asynchronous and Non-Blocking IO with JRuby
  type: presentation
  language: EN
  description: Asynchronous and non-blocking IO yields higher throughput, lower resource
    usage, and more predictable behaviour under load. This programming model has become
    increasingly popular in recent years, but you don't need to use Node.js to see
    these benefits in your program. You can build asynchronous applications with JRuby.
    In this talk, we’ll look at libraries and patterns for doing high performance
    IO in Ruby.
  speakers:
  - id: codefinger
  materials:
    - title: Async and Non-blocking IO w/ JRuby
      url: https://www.slideshare.net/jkutner/async-and-nonblocking-io-w-jruby
  video:
    youtube_id: BB5z8cg2Hlc
chancancode:
  title: 'Bending The Curve: Putting Rust in Ruby with Helix'
  type: presentation
  language: EN
  description: Two years ago at RubyKaigi, we demonstrated our initial work on Helix,
    an FFI toolkit that makes it easy for anyone to write Ruby native extensions in
    Rust. In this talk, we will focus on the challenges and lessons we learned while
    developing Helix. What did it take to fuse the two languages and still be able
    to take advantage of their unique features and benefits? How do we distribute
    the extensions to our end-users? Let's find out!
  speakers:
  - id: chancancode
  - id: hone02
  materials:
    - title: "Bending The Curve: Putting Rust in Ruby with Helix"
      url: https://speakerdeck.com/chancancode/bending-the-curve-putting-rust-in-ruby-with-helix
  video:
    youtube_id: M2erAV1CpRk
mtsmfm:
  title: Ruby Language Server
  type: presentation
  language: JA
  description: |-
    This talk describes [a ruby language server implementation I created](https://github.com/mtsmfm/languageserver-ruby).
    I want to increase developers interested in Ruby language server
    because I hope it will improve Ruby development experience.

    In last year, Microsoft published [Language Server Protocol](http://langserver.org/).
    This protocol is created to communicate between editors and language servers which provide useful information for development (ex. linting, completion, method definition).

    In this talk, I'll show you why it is important to create language server for Ruby community and how it's implemented.
  speakers:
  - id: mtsmfm
  materials:
    - title: Ruby Language Server
      url: https://speakerdeck.com/mtsmfm/ruby-language-server
  video:
    youtube_id: spPAdvskyLI
happywinebot:
  title: 'Food, Wine and Machine Learning: Teaching a Bot to Taste'
  type: presentation
  language: EN
  description: To use machine learning effectively, you have to understand its strengths,
    limitations and look for creative ways to apply it. Even if you are already familiar
    with machine learning, we can all learn more! Let me show you how I have used
    machine learning to build a bot that can suggest a wine to accompany your next
    meal.
  speakers:
  - id: happywinebot
  materials:
    - title: "Food, Wine and Machine Learning: Teaching a Bot to Taste"
      url: https://speakerdeck.com/mjnguyen/food-wine-and-machine-learning-teaching-a-bot-to-taste
  video:
    youtube_id: FP5Zxd5o_4M
yuri_at_earth:
  title: 'Write once, run on every boards: portable mruby'
  type: presentation
  language: JA
  description: |-
    In embedded programming, the development environment and libraries we use to program are different depending on hardware.
    So, we have to make different programs for each hardware.
    Would not it be nice if CRuby works on Mac and Windows, even if the hardware is different, would the same mruby program run?
    I have a plan off platform to make one same Ruby code run on various microcontrollers.
    In this session, I will introduce an example of running Ruby code on several microcomputers.
  speakers:
  - id: yuri_at_earth
  video:
    youtube_id: DF4oLrc7KaE
masa16tanaka:
  title: 'Progress of Ruby/Numo: Numerical Computing for Ruby'
  type: presentation
  language: JA
  description: In my view, the primary reason why Python has become popular in scientific
    computing is that Python has Numpy, a powerful tool for data processing and it
    serves as the basis of various libraries. As an equivalent to Numpy in Ruby, I
    have been developing NArray as I reported in RubyKaigi 2010. Now I am developing
    the new version of NArray as a library in Ruby/Numo (NUmerical MOdule). Currently
    Ruby/Numo contains interfaces to BLAS/LAPACK, GSL, FFTE, and Gnuplot. However,
    the development is far from complete and needs further effort. In this talk, I
    will report the progress of the Ruby/Numo project and discuss issues in scientific
    computing with Ruby.
  speakers:
  - id: masa16tanaka
  materials:
    - title: "Progress of Ruby-Numo: Numerical Computing for Ruby"
      url: https://speakerdeck.com/masa16tanaka/progress-of-ruby-numo-numerical-computing-for-ruby
  video:
    youtube_id: qJ6YIfbTLGM
jmettraux:
  title: Flor - hubristic interpreter
  type: presentation
  language: EN
  description: |-
    Originally, the talk was named "I wanted to write less code". We all do. But I fell into a rabbit hole of languages and interpreters. This will be an exposé of my hubristic quest.

    [Flor](https://github.com/floraison/flor) is a workflow engine, a remake of ruote, yet another celebration of the joy of programming in Ruby.
  speakers:
  - id: jmettraux
  materials:
    - title: flor - hubristic interpreter - RubyKaigi 2017
      url: https://speakerdeck.com/jmettraux/flor-hubristic-interpreter-rubykaigi-2017
  video:
    youtube_id: gXep-LwPvw8
tenderlove:
  title: Compacting GC in MRI
  type: presentation
  language: JA
  description: We will talk about implementing a compacting GC for MRI.  This talk
    will cover compaction algorithms, along with implementation details, and challenges
    specific to MRI.
  speakers:
  - id: tenderlove
  materials:
    - title: Building a Compacting GC
      url: https://speakerdeck.com/tenderlove/building-a-compacting-gc
  video:
    youtube_id: AuuYQaoqr24
i2y_:
  title: Introducing the Jet Programming Language
  type: presentation
  language: JA
  description: Jet is similar to Ruby and run on Erlang VM. In this talk, I will mainly
    explain the specification and implementation.
  speakers:
  - id: i2y_
  materials:
    - title: Introducing the Jet Programming Language
      url: https://speakerdeck.com/i2y/introducing-the-jet-programming-language
  video:
    youtube_id: SfF9va8NGhM
lctseng:
  title: Tamashii - Create Rails IoT applications more easily
  type: presentation
  language: EN
  description: "With the rise of embedded devices with general purpose operating system,
    running arbitrary programs on IoT devices becomes more feasible. Raspberry PI
    is one of the examples. We can use sensors, speakers and even cameras as building
    blocks to make our unique IoT devices. However, there must be some framework to
    integrate these components, and that is why we create the Tamashii system. Tamashii
    is a Ruby-based IoT framework on Raspberry PI. It defines common interfaces between
    components. It also provides a Rack-based device management server inspired by
    Action Cable, and makes it easy to integrate IoT logic into Rails application.
    We have implemented a check-in system with Tamashii and proved to work fine on
    Rubyconf.tw 2016.\n\nThere is also a short demo video to help you know more about
    Tamashii: \nhttps://youtu.be/hH6u4sJx_L4\n\nTamashii Official Website: https://tamashii.io"
  speakers:
  - id: lctseng
  materials:
    - title: Tamashii at RubyKaigi 2017
      url: https://speakerdeck.com/lctseng/tamashii-at-rubykaigi-2017
  video:
    youtube_id: g7WM6ITZYp0
keiju:
  title: 'Irb 20th anniversary  memorial session: Reish and Irb2'
  type: presentation
  language: JA
  description: "Irb has been born 20 years now.. To commemorate it I will talk about
    Reish and the next generation of Irb.\nReish is an an unix shell for rubyist.
    \ It is a shell language that realize Ruby's feature. Also, it is an language
    which is metamorphosed from Ruby for more natural shell operation.\nReish is under
    development. Reish is similar to Irb in usage, and various knowledge was gained
    in its development. I will introduce the vision of Irb next generation based on
    that.\n\nIrbは今年で生まれて20年になります. それを記念してReishとIrbの次世代の話をします. \nReishはRubyistのためのshellで,
    Rubyの機能を実現しています. また, Ruby操作から自然にshell操作に変換可能な言語です. \nReishは現在開発中です. ReishはIrbと使い方が似ていて,
    その開発からいろいろな知見を得ることができます。それを基にIrbの次世代の構想をお話しします."
  speakers:
  - id: keiju
  materials:
    - title: "Irb 20th anniversary memorial session: Reish and Irb2!?"
      url: https://speakerdeck.com/keiju/irb-20th-anniversary-memorial-session-reish-and-irb2
  video:
    youtube_id: mS7fBsBF_gg
tagomoris:
  title: Ruby for Distributed Storage System
  type: presentation
  language: JA
  description: |-
    Storage systems is a big topic in distributed systems, which requires high stability, reliability and performance. There are many OSS distributed storage systems, but most of these are implemented in Java and other JVM languages (just some others are in C++, Riak, etc).
    An OSS distributed storage, bigdam-pool, is implemented both in Java and Ruby and I'm getting a benchmark score for both implementations. This talk will show the details of benchmark result, and what I learnt from this trial.

    * Providing HTTP API in a daemon
    * Serializing/Deserializing Data
    * Performance
  speakers:
  - id: tagomoris
  materials:
    - title: Ruby and Distributed Storage Systems
      url: https://www.slideshare.net/tagomoris/ruby-and-distributed-storage-systems
  video:
    youtube_id: KrWhhgWHTwE
DeltonDing:
  title: High Concurrent Ruby Web Development Without Fear
  type: presentation
  language: EN
  description: |-
    We've been debating on the concurrency solution of Ruby for several years. Numerous custom "evented" drivers have been built, but for most of these projects, developers are required to think in the "evented" way to get things work properly, which not only breaks the elegance of Ruby programming, but also greatly increases the complexity of the refactoring process.

    We will then think in Ruby, looking for the solution to make your whole web application "evented" with great meta-programming features of Ruby language itself. So that, you could still concentrate on your business models while programming as usual, but the performance may boost to 5 times faster or more without any hesitation.
  speakers:
  - id: DeltonDing
  materials:
    - title: High Concurrent Ruby Web Development Without Fear
      url: https://www.slideshare.net/DeltonDing/high-concurrent-ruby-web-development-without-fear
  video:
    youtube_id: L_DRmV3LMYA
yotii23:
  title: Pattern Matching in Ruby
  type: presentation
  language: EN
  description: |-
    Do you want pattern matching in Ruby? I want.
    It will make Ruby more elegant, more useful, and more comfortable.
    So in this talk, I'll propose a specification about pattern matching in Ruby and will show my implementation in parse.y (a part of them).
  speakers:
  - id: yotii23
  materials:
    - title: Pattern Matching in Ruby
      url: https://speakerdeck.com/yotii23/pattern-matching-in-ruby-2017-rubykaigi
  video:
    youtube_id: 1m4IPJH0k0E
aycabta:
  title: Ruby Parser In IRB 20th Anniversary...Now Let Time Resume
  type: presentation
  language: EN
  description: |-
    IRB has an internal Ruby code parser by pure Ruby. It's contributing greatly to some Ruby tools. A part of them is RDoc. RDoc uses forked Ruby parser of IRB. It is great works, but so legacy. The maintenance cost for new Ruby syntax continues to increase. For example, Ruby 2.1 supports new feature `<visibility> def` method definition, but RDoc supports it after Ruby 2.4.

    I provide a solution for it. After Ruby 1.9, Ripper is adopted as standard library. Ripper is a parser for Ruby code, it uses `parse.y` of CRuby in common. It's perfect for supporting latest Ruby syntax.
  speakers:
  - id: aycabta
  video:
    youtube_id: fZGyXwiFNAo
0xColby:
  title: Bundler 2
  type: presentation
  language: EN
  description: The Bundler core team has been working hard on the next major release
    of Bundler. We'll talk about what improvements we've been making, new features
    & what we've removed.
  speakers:
  - id: 0xColby
  materials:
    - title: What we’ve been up to with Bundler
      url: https://speakerdeck.com/colby/what-weve-been-up-to-with-bundler
  video:
    youtube_id: sZX7SK3hxk4
headius:
  title: 'JRuby at 15 Years: Meeting the Challenges'
  type: presentation
  language: EN
  description: 'JRuby has evolved a lot over 15 years. We''ve met challenges of performance,
    native integration, and compatibility. What will we face in the future? In this
    talk we''ll discuss today''s JRuby challenges: startup time, code size, type specialization,
    and tooling. JRuby is the most-used alternative Ruby, and with your help we''ll
    continue to make it the best way to run your Ruby apps.'
  speakers:
  - id: headius
  - id: tom_enebo
  video:
    youtube_id: rkvrikvoYPQ
gotoken:
  title: Ruby in office time reboot
  type: presentation
  language: JA
  description: 'I''ll introduce some uses of Ruby in my everyday office hours. Various
    kind of tasks are helped by Ruby: deta processiong, scraping, excel sheet generation,
    Instllation ruby, etc. This is a continuation of old my talk series: Shigoto de
    tsukau Ruby. '
  speakers:
  - id: gotoken
  materials:
    - title: Ruby in office time reboot
      url: https://www.slideshare.net/gotoken/ruby-in-office-time-reboot
  video:
    youtube_id: PAQwlSfRjko
nateberkopec:
  title: Memory Fragmentation and Bloat in Ruby
  type: presentation
  language: EN
  description: 'Memory is not a simple abstraction. The layers of indirection between
    "Object.new" and flipping a bit in RAM are numerous: the Ruby heap, the memory
    allocator, the kernel, the memory management unit and more. Unfortunately, all
    of these layers can contribute to "bad behavior", resulting in memory fragmentation
    and bloat. This talk examines each of the different layers of memory abstraction,
    and how tuning and controlling them can result in reduced memory usage in Ruby
    applications.'
  speakers:
  - id: nateberkopec
  materials:
    - title: Memory Fragmentation and Bloat in Ruby
      url: https://github.com/speedshop/rubykaigi2017/blob/master/rubykaigi-present.pdf
  video:
    youtube_id: eBmM-yWPeMw
tanaka_akr:
  title: Ruby Extension Library Verified using Coq Proof-assistant
  type: presentation
  language: JA
  description: |-
    Ruby extension library is written in C.
    C is great because it is fast and easy to access low-level features of OS and CPU.
    However it is dangerous and error-prone:
    it is difficult to avoid failures such as integer overflow and buffer overrun.
    We explain a method to generate C functions verified using Coq proof-assistant with Coq plugins we developed.
    We can verify safety (absence of failures) and correctness (functions works as expected) in Coq.
    The generated functions can be used in Ruby extension library.
    This provides a way to develop trustful Ruby extension library.
    Supplement material: https://github.com/akr/coq-html-escape
  speakers:
  - id: tanaka_akr
  materials:
    - title: Ruby Extension Library Verified using Coq Proof-assistant
      url: http://www.a-k-r.org/pub/2017-09-20-akr-rubykaigi.pdf
  video:
    youtube_id: berjYyI5Bys
p_ck_:
  title: Writing Lint for Ruby
  type: presentation
  language: JA
  description: |-
    This talk describes how to write Lint for Ruby program.

    Lint finds bugs from code automatically. So, if you can write Lint, you can reduce bugs from your code automatically.
    This talk includes the following topics.

    - Implementation of existing Lint such as [RuboCop](https://github.com/bbatsov/rubocop) and [Reek](https://github.com/troessner/reek).
    - How to create new Lint or add a new rule to existing Lint yourself.
  speakers:
  - id: p_ck_
  materials:
    - title: Writing Lint for Ruby
      url: https://speakerdeck.com/pocke/writing-lint-for-ruby
  video:
    youtube_id: xr3uDzQIuBA
jules2689:
  title: 'Busting Performance Bottlenecks: Improving Boot Time by 60%'
  type: presentation
  language: EN
  description: 'Lengthy application boot times cause developers to quickly lose context
    and view applications in a negative light, which in turn costs organizations a
    lot of money and productivity. We found that there were a few areas that impacted
    boot time: compiling Ruby bytecode, serializing configurations, looking up files
    and constants, autoloading files, and booting Bundler. This talk focuses on our
    strategies and solutions which improved our boot time by 60%. Attendees will leave
    with knowledge of ways to find and mitigate their own startup performance bottlenecks.'
  speakers:
  - id: jules2689
  materials:
    - title: Busting Performance Bottlenecks Decreasing Ruby Boot time by 60%
      url: https://jnadeau.ca/presentations/rubykaigi2017/
  video:
    youtube_id: 8BJKrx6rsM0
m_seki:
  title: How to write synchronization mechanisms for Fiber
  type: presentation
  language: JA
  description: |-
    Ruby threads are amazing, but for some reason they don't seem to be very popular. So I decided I'd try experimenting with programming multiple independent execution flows in a single thread using Fibers.

    In this talk, I'll first explain an idiom for easily writing synchronization mechanisms between Fibers. Then I will explain in detail an example which combines a framework abstracting 'select' with the Fiber idiom to achieve blocking-like non-blocking IO. I'll explain this using actual code from examples of timer-based periodic processing and simple TCP/IP server programming, to an over-the-top example running WEBrick on a single thread (using Fiber to handle multiple clients synchronously). I'll also explain ways to combine this with threads.

    In the talk I'd like to present the following:
    * an example of select abstraction
    * some essential features for Fibers
  speakers:
  - id: m_seki
  materials:
    - title: How to write synchronization mechanisms for Fiber
      url: https://speakerdeck.com/m_seki/how-to-write-synchronization-mechanisms-for-fiber?slide=3
  video:
    youtube_id: 0mDnZ0V9OSA
takaokouji:
  title: 'Smalruby : The neat thing to connect Rubyists and Scratchers'
  type: presentation
  language: JA
  description: |-
    The Smalruby is a 2D game development library that aims to be compatible with Scratch (Scratch is most famous visual programming language: https://scratch.mit.edu/).

    Reacently, programming education for kids is expanding rapidly and Scratch is ususally a first-contact programming language for them.
    Some kids, good Scratchers, try to learn a text-based programming languege.

    Smalruby helps to make Scratcher Rubyist!

    This talk includes the following topics:

    * The recent situation of programming education for kids.
    * Smalruby's features.
    * Smalruby inside.
  speakers:
  - id: takaokouji
  - id: nobyuki
  materials:
    - title: Smalruby - The neat thing to connect Rubyists and Scratchers -
      url: https://www.slideshare.net/kouji/smalruby-the-neat-thing-to-connect-rubyists-and-scratchers
  video:
    youtube_id: U3pre3Bv9rk
nirvdrum:
  title: Improving TruffleRuby’s Startup Time with the SubstrateVM
  type: presentation
  language: EN
  description: 'We’ve solved the startup time problem in TruffleRuby! In this talk,
    I’ll introduce the SubstrateVM and how we make use of it to compile the Java-based
    TruffleRuby to a static binary and massively improve our startup time. '
  speakers:
  - id: nirvdrum
  materials:
    - title: Improving TruffleRuby’s Startup Time with the SubstrateVM
      url: https://speakerdeck.com/nirvdrum/improving-trufflerubys-startup-time-with-the-substratevm
  video:
    youtube_id: 5Ik2qCTmeN0
vnmakarov:
  title: Towards Ruby 3x3 performance
  type: keynote
  language: EN
  description: |-
    Ruby 3x3 project has a very ambitious goal to improve MRI performance in 3 times in comparison with MRI version 2.0.

    This talk is about my attempt to achieve this goal in a project to implement RTL VM instructions and JIT in MRI VM. The project can be found on https://github.com/vnmakarov/ruby.

    We will talk about the project motivation, goals, and approaches, and the current state of the project. Performance comparison with JRuby, Graal/Truffle Ruby, and OMR Ruby and future directions of the project will be given too.
  speakers:
  - id: vnmakarov
  materials:
    - title: Towards Ruby3x3 Performance - Introducing RTL and MJIT
      url: https://vmakarov.fedorapeople.org/VMakarov-RubyKaigi2017.pdf
  video:
    youtube_id: qpZDw-p9yag
