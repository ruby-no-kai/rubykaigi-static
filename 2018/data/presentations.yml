---
yukihiro_matz:
  title: Proverbs
  type: keynote
  language: JA
  description: Matz's keynote
  speakers:
  - id: yukihiro_matz
  video:
    youtube_id: zb8dXWYUX10
tenderlove:
  title: Analyzing and Reducing Ruby Memory Usage
  type: presentation
  language: JA
  description: |-
    Memory usage can be difficult to analyze.  In this presentation we will cover
    different techniques for analyzing memory usage of a Ruby process including
    in-process analysis tools as well as system level tools.  After doing memory
    analysis, we'll look at some ways to reduce overall memory used by the system.
    Attendees will leave with practical tips and tricks for memory analysis in
    their Ruby systems, as well as a better understanding of Ruby internals.
  speakers:
  - id: tenderlove
  materials:
    - title: Reducing Memory Usage in Ruby
      url: https://speakerdeck.com/tenderlove/reducing-memory-usage-in-ruby
  video:
    youtube_id: ILzQYMDp18o
kurotaky:
  title: 'bancor: Token economy made with Ruby'
  type: presentation
  language: JA
  description: |-
    There is a protocol called "Bancor Protocol" which is said to bring about automation of token liquidity and transaction price finding in Smart Contract.

    To verify the usefulness of this protocol in your project, it is costly to write a smart contract program and implement the application.

    When implementing applications with Ruby, I am making gem "bancor" to easily introduce and verify the Bancor Protocol.

    In this presentation, we will talk about how developers build "token economy" on Ruby application using "bancor" and how to quickly verify effect.
  speakers:
  - id: kurotaky
  materials:
    - title: 'bancor: Token economy made with Ruby'
      url: https://speakerdeck.com/kurotaky/bancor-token-economy-made-with-ruby
  video:
    youtube_id: gqBWoyMdn4c
maciejmensfeld:
  title: Karafka - Ruby Framework for Event Driven Architecture
  type: presentation
  language: EN
  description: Karafka allows you to capture everything that happens in your systems
    in large scale, providing you with a seamless and stable core for consuming and
    processing this data, without having to focus on things that are not your business
    domain. Have you ever tried to pipe data from one application to another, transform
    it and send it back? Have you ever wanted to decouple for existing code base and
    make it much more resilient and flexible? Come and learn about Karafka, where
    it fits in your existing projects and how to use it as a messages backbone for
    a modern, distributed and scalable ecosystem.
  speakers:
  - id: maciejmensfeld
  materials:
    - title: Karafka - Ruby Framework for Event Driven Architecture
      url: https://mensfeld.github.io/karafka-ruby-kaigi-2018/index.html#/
  video:
    youtube_id: bzvb1u_kSro
mrkn:
  title: Deep Learning Programming on Ruby
  type: presentation
  language: JA
  description: |-
    We will present you how to program deep learning models with a practical performance by Ruby language.
    We will use Apache MXNet and Red Chainer from Ruby.  While Apache MXNet is available through pycall.rb, they will be used directly from Ruby without such bridge system in this talk.
    Our demonstrations will show you that Ruby is ready to do such tasks.

    Additionally, we will show you the latest progress and the future forecasts of the projects that aim to make Ruby available in data science field.
  speakers:
  - id: mrkn
  - id: hatappi
  materials:
    - title: Deep Learning Programming on Ruby
      url: https://speakerdeck.com/mrkn/deep-learning-programming-on-ruby
  video:
    youtube_id: J-d_Lk4SFtQ
joker1007:
  title: Hijacking Ruby Syntax in Ruby
  type: presentation
  language: JA
  description: |-
    This talk shows how to introduce new syntax-ish stuffs using meta programming techniques and some more Ruby features not known well by many Rubyists. Have fun with magical code!

    - Show Ruby features to hack Ruby syntax (including Binding, TracePoint, Refinements, etc)
    - Describe stuffs introduced by these techniques
      - method modifiers (final, abstract, override)
      - Table-like syntax for testing DSL
      - Safe resource allocation/collection (with, defer)
    - Propose new traceable events, hooks, etc
  speakers:
  - id: joker1007
  - id: tagomoris
  materials:
    - title: Hijacking Ruby Syntax in Ruby
      url: https://www.slideshare.net/tagomoris/hijacking-ruby-syntax-in-ruby
  video:
    youtube_id: 04HGQEw3A6Y
DarkDimius:
  title: A practical type system for Ruby at Stripe.
  type: presentation
  language: EN
  description: |-
    At Stripe, we believe that a typesystem provides substantial benefits for a big codebase. They :

     - are documentation that is always kept up-to-date;
     - speed up the development loop via faster feedback from tooling;
     - help discover corner cases that are not handled by the happy path;
     - allow building tools that expose knowledge obtained through type-checking, such as "jump to definition".

    We have built a type system that is currently being adopted by our Ruby code at stripe. This typesystem can be adopted gradually with different teams and projects adopting it at a different pace. We support And and OrTypes as well as basic generics. Our type syntax that is backwards compatible with untyped ruby.

    In this talk we describe our experience in developing and adopting a type system for our multi-million line ruby codebase. We will also discuss what future tools are made possible by having knowledge about types in the code base.
  speakers:
  - id: DarkDimius
  - id: ptarjan
  - id: nelhage
  materials:
    - title: "Sorbet: A Typechecker for Ruby"
      url: https://sorbet.run/talks/RubyKaigi2018/
  video:
    youtube_id: eCnnBS2LXcI
bbatsov:
  title: All About RuboCop
  type: presentation
  language: EN
  description: |-
    In this talk we'll go over everything you need  to know about RuboCop - a powerful Ruby static code analyzer
    that makes it easy for you to enforce a consistent code style throughout your Ruby projects.

    We'll begin by
    examining the events that lead to the creation of RuboCop, its early days and its evolution, effective RuboCop usage
    and some of its cool but little-known features. Then we'll continue with a brief look into RuboCop's internals and show you how easy it is
    to extend its functionality.

    We'll wrap the talk with a glimpse inside RuboCop's future and discuss some of the challenges the project faces and some of the work that remains to be done, before RuboCop finally reaches
    the coveted 1.0 version.
  speakers:
  - id: bbatsov
  materials:
    - title: All About RuboCop
      url: https://speakerdeck.com/bbatsov/all-about-rubocop-rubykaigi-2018
  video:
    youtube_id: nrHjVCuVsGA
piotr_murach:
  title: TTY - Ruby alchemist’s secret potion
  type: presentation
  language: EN
  description: What if you were told that there is a set of simple and potent gems
    developed to exponentially increase productivity when building modern terminal
    applications such as Bundler, in next to no time? Curious about how you can harness
    this power and become a command line applications alchemist?
  speakers:
  - id: piotr_murach
  materials:
    - title: TTY - Ruby alchemist’s secret potion
      url: https://speakerdeck.com/piotrmurach/tty-ruby-alchemists-secret-potion
  video:
    youtube_id: AeUls-THfpQ
_st0012:
  title: What would your own version of Ruby look like?
  type: presentation
  language: EN
  description: "I believe most of us love Ruby, but I also believe most of us don't
    think Ruby is perfect. So what'd your own version of Ruby look like if you can
    create one?\n\nAs some of you may know, I created a language called Goby about
    a year ago. It's largely inspired by Ruby, and looks very similar to it. But it
    also have some design choices different than Ruby or have some unique features
    that Ruby doesn't have. \n\nIn this talk I'm going to discuss some important things
    we should focus on when designing a language. And I will also share the design
    choices made when developing Goby, as well as the philosophy behind these choices."
  speakers:
  - id: _st0012
  materials:
    - title: What would your own version of Ruby look like?
      url: https://www.slideshare.net/LoStan/what-would-your-own-version-of-ruby-look-like-rubykaigi
  video:
    youtube_id: ldqb5u4pQb0
sonots:
  title: Fast Numerical Computing and Deep Learning in Ruby with Cumo
  type: presentation
  language: JA
  description: |-
    Ruby is far behind than other languages such as Python in scientific computing. One reason is because there is no fast numerical library in Ruby.

    I have made a high speed numerical library for Ruby using CUDA named "Cumo". In this talk, I describe:

    * Overview of Scientific Computing in Ruby
    * Basic knowledge of GPU programming
    * Cumo inside, such as
      * Writing fast CUDA kernel
      * Implementing GPU memory pool
      * JIT compiling user-defined kernel
    * Performance comparison with Numo in an emerging DNN framework written in Ruby, red-chainer
  materials:
    - title: Fast Numerical Computing and Deep Learning in Ruby with Cumo
      url: https://speakerdeck.com/sonots/fast-numerical-computing-and-deep-learning-in-ruby-with-cumo
  speakers:
  - id: sonots
  video:
    youtube_id: osUvCcwMFnc
hsbt:
  title: RubyGems 3 & 4
  type: presentation
  language: JA
  description: |-
    The RubyGems is a mechanism to install libraries via the Internet without standard libraries. As maintenance manager of RubyGems and core member of Ruby core team, I'm working to merge the latest version of RubyGems with a latest stable version of ruby every year.

    In this presentation, I will introduce the new feature of RubyGems 2.7 and describe the mechanism of integration with Bundler. Finally, I introduce a roadmap for RubyGems 3 and 4, which is developing for Ruby 2.6 and 3 release.

    Through this talk, you will be able to enjoy the ruby world more by understanding RubyGems at the center of ruby's ecosystem.
  speakers:
  - id: hsbt
  materials:
    - title: RubyGems 3 & 4
      url: https://www.slideshare.net/hsbt/rubygems-3-4
  video:
    youtube_id: wuyhit3-_xA
thibaut_barrere:
  title: Kiba 2 - Past, present & future of data processing with Ruby
  type: presentation
  language: EN
  description: |-
    Kiba ETL (http://www.kiba-etl.org) is a lightweight, generic data processing framework for Ruby, initially released in 2015 & now in v2.

    In this talk, I'll highlight why Kiba was created, how it is used for low-maintenance data preparation and processing in the enterprise (illustrated by many different use cases), why and how the version 2 (leveraging Ruby's Enumerator) brings a massive improvement in authoring reusable & composable data processing components, and why I'm optimistic about the future of data processing with Ruby.
  speakers:
  - id: thibaut_barrere
  materials:
    - title: Kiba ETL v2
      url: https://speakerdeck.com/thbar/kiba-etl-v2-rubykaigi-2018
  video:
    youtube_id: fxVtbog7pIQ
Yuryu:
  title: Exploring Internal Ruby Through C Extensions
  type: presentation
  language: JA
  description: You may have wondered how Ruby objects are represented in the CRuby
    code. Not really? I would say writing a C extension is a great way to explore
    and learn how CRuby handles different object types. This session will re-implement
    our own Hash class, explain basic types in the CRuby, compare performance between
    native Hash, pure C++ implementation, and the C extension version, and discuss
    memory layouts and consumption in Ruby. The audience will also become more comfortable
    with the CRuby code through this session. Experience with C is not required.
  speakers:
  - id: Yuryu
  materials:
    - title: Exploring Internal Ruby Through C Extensions
      url: https://speakerdeck.com/yuryu/exploring-internal-ruby-through-c-extensions
  video:
    youtube_id: Om_cm120t1E
p_ck_:
  title: A parser based syntax highlighter
  type: presentation
  language: JA
  description: |-
    > It has an elegant syntax that is natural to read and easy to write.
    > https://www.ruby-lang.org/en/

    Definitely. The syntax is elegant. But it is too complex sometimes. So, syntax highlighters for Ruby are difficult and easy to break.
    For example, probably your editor cannot correctly highlight `????::?:`, `% %s%% %%%%` or `def end(def:def def;end)end` (They are **valid** Ruby programs!).
    Yeah, it is edge cases. In real cases, some syntax highlighter cannot correctly highlight a here document.

    I'll talk a robust syntax highlighter for Ruby, it is Iro gem and Iro.vim.  The highlighter never break since it uses Ripper to highlight code.
  speakers:
  - id: p_ck_
  materials:
    - title: A parser based syntax highlighter
      url: https://speakerdeck.com/pocke/a-parser-based-syntax-highlighter
  video:
    youtube_id: 8tarr2k0kMI
anton_davydov:
  title: Architecture of hanami applications
  type: presentation
  language: EN
  description: |-
    The general part of any web application is business logic. Unforchanotly, it's really hard to find a framework with specific rules and explanations how to work with it. In hanami, we care about long-term maintenance that's why it's really important to us how to work with business logic.

    In my talk, I'll share my ideas how to store and work with business logic in hanami apps. We will talk about hanami, dry and some architecture ideas, like event sourcing. This talk will be interesting for any developers. If you work with other frameworks you can take these ideas and my it to your project.
  speakers:
  - id: anton_davydov
  materials:
    - title: Architecture of hanami applications
      url: https://speakerdeck.com/davydovanton/architecture-of-hanami-applications
  video:
    youtube_id: Rcbqa0QFXJQ
ktou:
  title: My way with Ruby
  type: keynote
  language: JA
  description: |-
    Here are my activities as a Rubyist:

      * Increase what Ruby can do with free software
      * Maintain libraries

    In this talk, I introduce my activities.
  speakers:
  - id: ktou
  materials:
    - title: My way with Ruby
      url: https://slide.rabbit-shocker.org/authors/kou/rubykaigi-2018/
  video:
    youtube_id: d7lDhsE1jXg
hone02:
  title: Controlling Droids™ with mruby & Go
  type: presentation
  language: EN
  description: |-
    Ruby has never been at the forefront of dealing with robots, IoT, or other low level systems. What Ruby is great at is scripting and building DSLs. Using mruby we can leverage existing ecosystems while still using the language we love.

    In this talk, we'll deep dive into how we can execute mruby handlers inside a Go event reactor to control a Sphero R2-D2. With surprisingly few lines of code, you can coordinate motors, lights, and sound concurrently. Come learn about mruby & robotics and see the Droids™ you're looking for in action.
  speakers:
  - id: hone02
  - id: code0100fun
  materials:
    - title: A Droid's Journey
      url: https://speakerdeck.com/hone/a-droids-journey-rubykaigi-2018
  video:
    youtube_id: NhQovmLaHfY
wyhaines:
  title: It's Rubies All The Way Down
  type: presentation
  language: EN
  description: Ruby is a language with expansive capabilities. One of it's main niches
    is with web application work. Typically, Ruby is used exclusively in the application
    container/application layer, with other technologies providing the rest of the
    stack. Ruby can fill other roles in the application stack, though, so for fun,
    let's explore a stack that is composed of Ruby software from top to bottom. What
    would that look like? How would it perform? Why would you do this?
  speakers:
  - id: wyhaines
  materials:
    - title: It's Rubies All The Way Down
      url: https://slides.com/wyhaines/its-rubies-all-the-way-down
  video:
    youtube_id: _rwfsse7OYk
codefolio:
  title: 'Faster Apps, No Memory Thrash: Get Your Memory Config Right'
  type: presentation
  language: EN
  description: |-
    The Ruby memory system can be tricky. Configuring it isn't easy. I'll show you a new simple tool to optimize your Ruby binary's memory settings.
    You'll learn about the CRuby memory resources and how you check them. Let's optimize your memory usage to keep memory small and keep garbage collection fast.
  speakers:
  - id: codefolio
  materials:
    - title: Faster Apps, No Memory Thrash
      url: https://docs.google.com/presentation/d/1-WrYwz-QnSI9yeRZfCCgUno-KOMuggiGHlmOETXZy9c
  video:
    youtube_id: Z4nBjXL-ymI
ko1:
  title: Guild Prototype
  type: presentation
  language: EN
  description: |-
    RubyKaigi 2016, I proposed a new concurrency abstraction named Guild for Ruby 3.
    Guild will achieve safe concurrency programming and parallel computation.
    We are making prototype of Guild. This talk will introduce Guild concepts and evaluation with prototype of Guild.
    Also we are discussing about the name of "Guild" to find out the another appropriate name. I will introduce the discussion of this "naming battle".
  speakers:
  - id: ko1
  materials:
    - title: Guild Prototype
      url: https://www.slideshare.net/KoichiSasada/guild-prototype
  video:
    youtube_id: BO8ThL2H3tc
koic:
  title: Improve Ruby coding style rules and Lint
  type: presentation
  language: JA
  description: |-
    This talk describes improving a Ruby coding style rules and Lint when using RuboCop.

    Opportunities for using static analysis tools to unify coding style within a repository are not uncommon. However, the real world is not unified by the sole coding rule. Even so, we can approach the coding rule that we think is better. I'd like to talk about that in this topic.
  speakers:
  - id: koic
  materials:
    - title: Improve Ruby coding styles and Lint
      url: https://speakerdeck.com/koic/improve-ruby-coding-styles-and-lint
  video:
    youtube_id: W4ZvpNpKWXo
Edouard-chin:
  title: Journey of a complex gem upgrade
  type: presentation
  language: EN
  description: |-
    Although every gem bump should be done carefully and with attention, most of the time it’s just a matter of running the `bundle update` command, look at the CHANGELOG, and maybe fix couple tests failing due to the upgrade.
    But what about upgrading a gem whom introduced a lot of breaking changes in the new version?
    The upgrade could cause hundreds if not thousands of your existing tests to fail.

    In this talk I’d like to share the different techniques and strategies that will allow you to upgrade any dependency smoothy and safely.
  speakers:
  - id: Edouard-chin
  materials:
    - title: Journey of a complex gem upgrade
      url: https://speakerdeck.com/edouardchin/journey-of-a-complex-gem-upgrade
  video:
    youtube_id: Lu5aHMxldmg
m_seki:
  title: extend your own  programming language
  type: presentation
  language: JA
  description: |-
    書籍「RubyでつくるRuby」はRubyの（極小の）サブセットMinRubyをRubyで実装しながら、Rubyとプログラミング言語とインタプリタを学ぶ本です。入門者にとって、フルセットのRubyを改造するのはちょっと難しいですが、MinRubyのサイズならちょうどよい教材です。MinRubyを拡張し自分の言語を作ることで得られる万能感は格別です。
    本講演では、MinRubyを拡張してRuby自体に新しい機能を追加する例を紹介します。末尾呼び出し最適化、実行コンテキストの別プロセスへ移送、変数操作のフックなど、ライブラリだけで実装するのは難しいRubyの変種を示します。
  speakers:
  - id: m_seki
  materials:
    - title: Extend your own programming language
      url: https://speakerdeck.com/m_seki/extend-your-own-programming-language-rubykaigi-2018
  video:
    youtube_id: FXELyEXajD4
yuri_at_earth:
  title: mruby can be more lightweight
  type: presentation
  language: JA
  description: |-
    mruby is called “lightweight Ruby”, but in fact it consumes rather much RAM memory.

    In this talk, I will explain a proposal of implementation to use ROM instead of RAM.  In addition, I will talk about some configurations for reducing RAM usage.

    I also demonstrate using an evaluation board (RAM:96 KB) which became available as a result of reducing RAM usage.
  speakers:
  - id: yuri_at_earth
  materials:
    - title: mruby can be more lightweight
      url: https://www.slideshare.net/yamanekko/mruby-can-be-more-lightweight-102604291
  video:
    youtube_id: sFz5-xGTEbI
jules2689:
  title: Scaling Teams using Tests for Productivity and Education
  type: presentation
  language: EN
  description: As Ruby organizations scale, more developers join the team. More developers
    makes it increasingly difficult to enforce code styles, follow best practices,
    and document mistakes that were made without relying on word of mouth. While we
    have tools, such as Rubocop, to check some stylistic components, we lack tooling
    to document issues and best practices. This talk focuses on strategies and solutions,
    particularly around best practices, that we employ to help educate and accelerate
    nearly a thousand developers, without getting in their way, by providing them
    information “just in time”.
  speakers:
  - id: jules2689
  materials:
    - title: Avoiding Cognitive Overload - Tests for Productivity and Education
      url: https://docs.google.com/presentation/d/1T1uPY1QX9B-UacA8AuGaDbxWZu8AYnYUC2FzyZmfeag
  video:
    youtube_id: InFnu8bYi6s
soutaro:
  title: Ruby Programming with Type Checking
  type: presentation
  language: EN
  description: |-
    Last year, I had a presentation to introduce Steep, a type checker for Ruby. However, the implementation is so experimental that it cannot be used for production at all.

    In this talk, I will report the nine months progress of the project and share the experience how the tool helps Ruby programming.
  speakers:
  - id: soutaro
  materials:
    - title: Ruby Programming with Type Checking
      url: https://speakerdeck.com/soutaro/ruby-programming-with-type-checking
  video:
    youtube_id: QK_v0XN8kXc
hasumon:
  title: Firmware programming with mruby/c
  type: presentation
  language: JA
  description: |-
    We have a new choice to write firmware for microcomputers(microcontrollers). It's mruby/c.
    This talk shows how to introduce mruby/c firmware programming. And besides, my actual IoT project for Japanese Sake brewery will be described.
    Since mruby/c is still a young growing tool, you will know there are several(many?) things you can help it to become better.
  speakers:
  - id: hasumon
  materials:
    - title: Firmware programming with mruby/c
      url: https://slide.rabbit-shocker.org/authors/hasumikin/rubykaigi2018/
  video:
    youtube_id: ng0N0761N3c
v0dro:
  title: 'Ferrari Driven Development: superfast Ruby with Rubex'
  type: presentation
  language: EN
  description: |-
    Did you ever really really want to speed up your Ruby code with C extensions but got baffled by mountains of documentation and scary C programming and chose to move to another language instead? Did you wish that you could just release that GIL and extract all the juice that your processor has to offer without losing your hair? If yes, then come see this talk!

    This talk will introduce you to Rubex, the fastest and happiest way of writing Ruby C extensions. Rubex is a whole new language designed from the ground up keeping in mind Ruby's core philosophy - make programmers happy.
  speakers:
  - id: v0dro
  materials:
    - title: 'Ferrari Driven Development: superfast Ruby with Rubex'
      url: https://speakerdeck.com/v0dro/ferrari-driven-development-superfast-ruby-with-rubex
  video:
    youtube_id: 7edbdHZvr8k
spikeolaf:
  title: RNode with code positions
  type: presentation
  language: JA
  description: |-
    This talk describes about code positions on Ruby.

    Code positions are new location information of AST Nodes, introduced from Ruby 2.5.
    Code positions enable us to improve warning messages, exception messages, `Proc#source_location` and so on.

    This talk includes the following topics.

    * What code positions are.
    * Why they are needed.
    * How they are implemented.
  speakers:
  - id: spikeolaf
  materials:
    - title: RNode with code locations
      url: https://speakerdeck.com/yui_knk/rnode-with-code-locations
  video:
    youtube_id: YjmBJg52aws
udzura:
  title: How Ruby Survives in the Cloud Native World
  type: presentation
  language: EN
  description: |-
    The container orchestration technology is attracting the Ops/SRE's attention along with the gaining importance of microservices and server-less architecture. But in my opinion, around these "cloud-native" developments, the Ruby language shows smaller activities than other younger languages(especially Go and Rust).
    By the way, in 2016, I created a container runtime Haconiwa with mruby. In 2017, I also scratched up the containers platform for my company's web hosting service using Ruby and mruby in many components. Here in 2018, I'm going to create the brand-new container orchestration tool fully implemented in Ruby and mruby.
    I will talk about how I used Ruby and mruby in these container and orchestration implementations.  In addition, I will show my opinion about what kind of Ruby's features are good for these implementations, and what kind of features are required for cloud-native Ruby.
  speakers:
  - id: udzura
  materials:
    - title: How Ruby Survives in the Cloud Native World
      url: https://speakerdeck.com/udzura/how-ruby-survives-in-the-cloud-native-world
  video:
    youtube_id: 7Anlio4nnng
gsamokovarov:
  title: Implementing Web Console
  type: presentation
  language: EN
  description: |-
    Web Console is a debugging tool bundled with Rails. The most popular feature is a console that is shown in every development error, however, it is a general purpose debugging tool that let you execute Ruby code in any binding as it runs, through its web UI.

    In this talk, we'll take a look at how the web-console gem is implemented. This includes a deep dive into how exceptions in Ruby work; how to build Ruby bindings for every part of an exception backtrace, so we can execute code in them; how we interact with the DebugInspector and TracePoint C APIs to make this possible and how we supported alternative Ruby implementations like JRuby.
  speakers:
  - id: gsamokovarov
  materials:
    - title: Implementing Web Console
      url: https://kaigi-implementing-web-console.herokuapp.com/
  video:
    youtube_id: OCjc0RH5epY
mrkn2:
  title: RubyData Workshop (1)  Data Science in Ruby
  type: presentation
  language: EN
  description: |-
    - Data analysis hands on using Ruby's data tools
    - Data analysis hands on using pycall.rb and Python data tools
  speakers:
  - id: mrkn2
mametter:
  title: 'Type Profiler: An analysis to guess type signatures'
  type: presentation
  language: JA
  description: |-
    After matz set Ruby 3 goals including static analysis, its requirements (and compromises) have been revealed gradually.  We review the current status as far as we know, briefly survey some existing proposals and implementations related to type checking for Ruby, and clarify what is good and what is missing.

    Based on this survey, we prototype a type profiler, one of the missing parts for Ruby type checking system.  A type profiler analyzes existing Ruby programs statically and dynamically, and creates a stub of type definitions.  We discuss its design and show some experiment results.
  speakers:
  - id: mametter
  materials:
    - title: 'Type Profiler: An Analysis to guess type signatures'
      url: https://www.slideshare.net/mametter/type-profiler-an-analysis-to-guess-type-signatures
  video:
    youtube_id: U6mKwwO7QCg
scalone:
  title: 20k MRuby devices in production
  type: presentation
  language: EN
  description: |-
    I've changed an entire solid runtime for mRuby, and for 3 years, even if is not recommend, we've been running mRuby in production reaching 20k machines and billons of dollars in payment transactions. We faced a lot of problems, but even more benefits adopting mRuby. This talk is about those topics, like:

    - Runtime and application Update/Upgrade
    - Communication configuration and intelligence
    - Payment transaction security and cryptography
    - Concurrency
    - Code sharing between CRuby and mRuby
    - Memory management and leaks
    - Open Source
  speakers:
  - id: scalone
  materials:
    - title: 20k mRuby devices in Production
      url: https://speakerdeck.com/scalone/20k-mruby-devices-in-production
  video:
    youtube_id: vMjT2DqV_vw
palkan_tula:
  title: One cable to rule them all
  type: presentation
  language: EN
  description: |-
    Modern web applications actively use real-time features. Unfortunately, nowadays Ruby is rarely considered as a technology to implement yet another chat – Ruby performance leaves much to be desired when dealing with concurrency and high-loads.

    Does this mean that we should betray our favorite language, which brings us happiness, in favor of others?

    My answer is NO, and I want to show you, how we can combine the elegance of Ruby with the power of other languages to improve the performance of real-time applications.
  speakers:
  - id: palkan_tula
  materials:
    - title: 'AnyCable: One cable to rule them all'
      url: https://speakerdeck.com/palkan/rubykaigi-2018-anycable-one-cable-to-rule-them-all
  video:
    youtube_id: jXCPuNICT8s
ktou2:
  title: RubyData Workshop (2)  Red Data Tools Lightning Talks
  type: presentation
  language: EN
  description: "- The members of Red Data Tools will present short presentations about
    their development activities in Red Data Tools."
  speakers:
  - id: ktou2
rubylangorg:
  title: Ruby Committers vs the World
  type: presentation
  language: JA
  description: Ruby core committers on stage!
  speakers:
  - id: rubylangorg
  video:
    youtube_id: dhHAaybjCfE
eregontp:
  title: Parallel and Thread-Safe Ruby at High-Speed with TruffleRuby
  type: keynote
  language: EN
  description: |-
    Array and Hash are used in every Ruby program. Yet, current implementations either prevent the use of them in parallel (the global interpreter lock in MRI) or lack thread-safety guarantees (JRuby raises an exception on concurrent Array#<<). Concurrent::Array from concurrent-ruby is thread-safe but prevents parallel access.

    This talk shows a technique to make Array and Hash thread-safe while enabling parallel access, with no penalty on single-threaded performance. In short, we keep the most important thread-safety guarantees of the global lock while allowing Ruby to scale up to tens of cores!
  speakers:
  - id: eregontp
  materials:
    - title: Parallel and Thread-Safe Ruby at High-Speed with TruffleRuby
      url: https://speakerdeck.com/eregon/parallel-and-thread-safe-ruby-at-high-speed-with-truffleruby
  video:
    youtube_id: mRKjWrNJ8DI
sugiyama-k:
  title: Grow and Shrink - Dynamically Extending the Ruby VM Stack
  type: presentation
  language: JA
  description: |-
    Currently, MRI (the reference implementation of Ruby) allocates 1MB of stack space for each thread. This is clearly sub-optimal, in particular for highly multi-threaded applications.

    We have successfully implemented dynamical stack extension for MRI, starting with a very small stack size and growing each stack only when needed. We will present two different implementations, one very close to the current stack structure, and one with a different stack structure. We will also explain how we made sure that our implementation is stable. On Linux, we achieve a memory reduction per thread of up to 30%, at the cost of an average speed increase (measured across all Ruby benchmarks) of 6%.
  speakers:
  - id: sugiyama-k
  - id: duerst
  materials:
    - title: Grow and Shrink - Dynamically Extending the Ruby VM Stack
      url: https://www.slideshare.net/KeitaSugiyama1/grow-and-shrink-dynamically-extending-the-ruby-vm-stack
  video:
    youtube_id: hjTw0T220zs
kn1kn1:
  title: Ruby code from the stratosphere - SIAF, Sonic Pi, Petal
  type: presentation
  language: JA
  description: |-
    Last year I participated in a project called [space-moere](http://space-moere.org/) of [SIAF2017](http://siaf.jp/en/) (Sapporo International Art Festival 2017). In the project we received [Sonic Pi](http://sonic-pi.net/) code generated in the stratosphere and had live performance using it. For the live performance, I made a small language called [Petal](https://github.com/siaflab/petal).

    In this session, I will talk about the topics as follows:

    * space-moere project
    * Petal
    * some projects based on it (Sonic Pi and TidalCycles)

    Session Notes: https://gist.github.com/kn1kn1/c28f8029ba5ee069d83b8b6a6c4c8543
  speakers:
  - id: kn1kn1
  materials:
    - title: Ruby code from the stratosphere - SIAF, Sonic Pi, Petal
      url: https://github.com/kn1kn1/rubykaigi2018/blob/master/slide/ruby-code-from-the-stratosphere.pdf
  video:
    youtube_id: amn6gHJOjIQ
aycabta:
  title: 'IRB Reboot: Modernize Implementation and Features'
  type: presentation
  language: EN
  description: |-
    IRB was written at 20 years ago and contains Ruby code parser by pure Ruby. The parser is contributing greatly to some Ruby tools over many years but the maintenance cost for new Ruby syntax continues to increase. IRB must parse Ruby code certainly for when should evaluate the code. I provide a solution for it. Ruby 1.9 or later has two big new features for this problem, `Ripper` and `RubyVM::InstructionSequence.compile`. The two features provide whether code piece continues by tokens information and syntax check.

    After IRB implementation was modernized, I added some new features to IRB. IRB imports RDoc features as a library, such as show documentation with auto-complete, auto-complete for meta-programmed namespaces.
  speakers:
  - id: aycabta
  materials:
    - title: 'IRB Reboot: Modernize Implementation and Features'
      url: https://slide.rabbit-shocker.org/authors/aycabta/rubykaigi-2018/
  video:
    youtube_id: zUBxip-bhJA
k0kubun:
  title: The Method JIT Compiler for Ruby 2.6
  type: presentation
  language: JA
  description: |-
    Did you know Ruby 2.6 will be shipped with JIT compiler? Do you know why JIT compiler makes Ruby fast?

    In this talk, you'll see how Ruby can be made faster by surprisingly short ERB code,
    and the future of Ruby's performance by method inlining.
  speakers:
  - id: k0kubun
  materials:
    - title: The Method JIT Compiler
      url: https://speakerdeck.com/k0kubun/the-method-jit-compiler
  video:
    youtube_id: svtRUkD0ACg
keiju:
  title: 'Reirb: Reborn Irb'
  type: presentation
  language: JA
  description: |-
    Reirb is a reborn irb, which interactive ruby language.
    It is a high-functional shell language with ruby's syntax.
    Its feature are job control, multiline-editor, smart-completion, language-navigation functionalities, etc.
    Everyone will be able to live more enjoyable Ruby-life by using Reirb.
  speakers:
  - id: keiju
  materials:
    - title: 'Reirb: reborn Irb.'
      url: https://speakerdeck.com/keiju/reirb-reborn-irb
  video:
    youtube_id: zGbmD7LQP2s
drbrain:
  title: Devly, a multi-service development environment
  type: presentation
  language: EN
  description: |-
    Writing a system alone is hard. Building many systems with many people is harder.

    As our company has grown, we tried many approaches to user-friendly, shared development environments and learned what works and what doesn't. We incorporated what we learned into a tool called devly. Devly is used to develop products at Fastly that span many services written in different languages.

    We learned that the design of our tools must be guided by how teams work and communicate. To respond to these needs, Devly allows self-service, control, and safety so that developers can focus on their work.
  speakers:
  - id: drbrain
  - id: ezkl
  video:
    youtube_id: rlZR9jXmvL4
shugomaeda:
  title: Build your own tools
  type: presentation
  language: JA
  description: |-
    Now FLOSS is so common that even Microsoft use it and develop it.  But do you have control over your tools for daily use?

    Building your own tools is the best way to develop software, and Ruby is the best language for such use.  In this talk, I introduce my own tools and my development style.
  speakers:
  - id: shugomaeda
  materials:
    - title: Build your own tools
      url: https://slide.rabbit-shocker.org/authors/shugo/RubyKaigi2018/
  video:
    youtube_id: H0mn5u28tPo
take-cheeze:
  title: LuaJIT as a Ruby backend.
  type: presentation
  language: JA
  description: |-
    LuaJIT is an excellent implementation of Lua with JIT.
    It also provides JIT modules that can be reused in other language.
    In this session I will talk experience using LuaJIT as mruby backend.
  speakers:
  - id: take-cheeze
  materials:
    - title: LuaJIT as a Ruby backend
      url: https://speakerdeck.com/takecheeze/luajit-as-a-ruby-backend
  video:
    youtube_id: F-lZtxewCcs
malafortune:
  title: Deep into Ruby Code Coverage
  type: presentation
  language: EN
  description: |-
    Code coverage is an easy way to measure if we have enough tests, yet many of us have yet to use it.

    This talk delves into the benefits of meaningful code coverage and how to avoid some of its pitfalls with a new tool called DeepCover.
  speakers:
  - id: malafortune
  materials:
    - title: Deep into Ruby Code Coverage
      url: https://www.slideshare.net/MarcAndrLafortune/deep-into-ruby-code-coverage
  video:
    youtube_id: HWj3nrvAmRM
youchan:
  title: How to get the dark power from ISeq
  type: presentation
  language: JA
  description: "ISeq is a cross-section of the Ruby interpreter.\nIf there is a parser
    that generates ISeq, it can run languages other than Ruby. If there is a processing
    system that interprets iSeq, it may be possible to run Ruby on other than MRI's
    supporting platform. \nJava is actively carrying out such things by disclosing
    the Virtual Machine specification. For example, Scala is the language running
    on JavaVM, and there are many versions of JavaVM for various platforms.\nSpecifying
    Ruby's iSeq may be a good thing or a bad thing. Either way, it will be useful
    to explore its possibilities.\nThe speaker is trying to document the current spec
    of ISeq. \nIn this talk, I will talk to three stances of people. The first are
    \ the most of the audiences who purely interest about hacking of ISeq.  The second
    are potential users of ISeq, I show hints what we should do. At last I will raise
    a probrem whether ISeq should be documented to the Ruby core team."
  speakers:
  - id: youchan
  materials:
    - title: How to get the dark power from ISeq
      url: http://youchan.org/RubyKaigi2018/RubyKaigi2018/
  video:
    youtube_id: zTO2t24IhgI
i110:
  title: How happy they became with H2O/mruby, and the future of HTTP
  type: presentation
  language: JA
  description: |-
    Are you suffering from your messy web server config files? Do you have a craving for maintainability and flexibility, but worry about performance? This talk introduces a real migration story from nginx to H2O in a large-scale photo sharing service, illustrating how mruby scripting makes it easier to write and maintain configurations. We'll see real configuration examples, some issues we faced and the final result with some benchmarks. In addition, I'll show a lot of shiny new features and mrbgems added recently. You'd be surprised how advanced things can be done with H2O and mruby!
    In the talk, Kazuho Oku will also discuss the standardization of H2 extensions, QUIC, and how they are likely to affect web application development and deployment.
  speakers:
  - id: i110
  - id: kazuho
  materials:
    - title: How happy they became with H2O/mruby and the future of HTTP
      url: https://www.slideshare.net/ichitonagata/how-happy-they-became-with-h2omruby-and-the-future-of-http
  video:
    youtube_id: r9zNEY6KtkI
prasun_anand:
  title: High Performance GPU computing with Ruby
  type: presentation
  language: EN
  description: |-
    Ruby being so old and a mature programming is still not preferred for Scientific Computing, mostly because it can’t handle large datasets .

    RbCUDA and ArrayFire gem, that I created have an outstanding performance and can handle real world problems by crunching huge datasets.

    In this talk I would like to show how RbCUDA and ArrayFire help you easily accelerate your code.
  speakers:
  - id: prasun_anand
  materials:
    - title: High Performance GPU computing with Ruby, Rubykaigi 2018
      url: https://www.slideshare.net/PrasunAnand2/high-performance-gpu-computing-with-ruby-rubykaigi-2018
  video:
    youtube_id: LP9lIqCAbFE
vnmakarov:
  title: Three Ruby performance projects
  type: presentation
  language: EN
  description: |2-
      There are many ways to improve performance of a serious program like CRuby.  This presentation is an illustration of this on three different size projects.

      One project is pretty small. It is to introduce a **new CRuby internal representation of IEEE 754 double precision numbers** to improve CRuby floating point performance. The second one is a medium-size **project to generate RTL from YARV instructions** and to use RTL for the interpretation and JIT compilation.  And the third one is a very ambitious project to create a **light-weight JIT** which can be used together with MJIT as a tier 1 JIT compiler or as a single JIT for mruby.
  speakers:
  - id: vnmakarov
  materials:
    - title: Three CRuby Performance Projects
      url: https://www.slideshare.net/VladimirMakarov13/three-cruby-performance-projects
  video:
    youtube_id: emhYoI_RiOA
matsumotory:
  title: Design pattern for embedding mruby into middleware
  type: presentation
  language: JA
  description: |-
    mruby released in 2012 and 6 years have passed.
    I have embedded mruby into a lot of middleware like ngx_mruby, and have designed and implemented both extensibility and performance compatibility in middleware.
    I want to share not only the specifications and background but also design and implementation that only I know for embedding mruby into middleware since I have been sending patches of specifications and features to mruby.
    In this presentation, I generalize the design and implementation to connect middleware supporting Internet service with mruby and introduce it as a design pattern.
  speakers:
  - id: matsumotory
  materials:
    - title: Design pattern for embedding mruby into middleware
      url: https://speakerdeck.com/matsumoto_r/design-pattern-for-embedding-mruby-into-middleware
  video:
    youtube_id: xXvaY-xpfpc
tom_enebo:
  title: JRuby 9.2 and Rails 5.x
  type: presentation
  language: EN
  description: "JRuby 9.2 has been released. 9.2 supports Ruby 2.5 compatibility and
    it also runs Rails 5.x well. This talk will discuss some of the more interesting
    apects of JRuby 9.2:\n\n  - Performance updates\n    - Graal integration\n    -
    IR instr refactoring\n    - Object shaping\n  - Full encoding support ( @@かいぎ
    ||= $\U0001F43B\U0001F33B.send :┬─┬ノº_ºノ' )\n  - Improved Windows support\n\nIt
    will also give an update on the state of running Rails 5.x on JRuby. This talk
    will go over updates we have made to ActiveRecord-JDBC and show a real world use-case
    of getting Discourse running. Get up to date on the state of JRuby!"
  speakers:
  - id: tom_enebo
  materials:
    - title: JRuby 9.2 and Rails 5.x
      url: https://speakerdeck.com/enebo/jruby-9-dot-2-and-rails-5-dot-x
  video:
    youtube_id: ue5XVN0SJEw
tric:
  title: TRICK 2018 (FINAL)
  type: presentation
  language: JA
  description: The 3rd (FINAL) Transcendental Ruby Imbroglio Contest for rubyKaigi
  speakers:
  - id: tric
  materials:
    - title: TRICK 2018 results
      url: https://www.slideshare.net/mametter/trick-2018-results
  video:
    youtube_id: TB-nmGG6uu0
