---
yukihiro_matz:
  title: Matz Keynote
  type: keynote
  language: JA
  description: ''
  speakers:
  - id: yukihiro_matz
  video:
    youtube_id: wVrJZReHlM8
mametter:
  title: 'Type Profiler: a Progress Report of a Ruby 3 Type Analyzer'
  type: presentation
  language: JA
  description: Type Profiler is a type inference tool for plain Ruby code. It analyzes
    Ruby code that has no type information and guesses a type of the modules and methods
    in the code. The output will serve as a signature for external type checkers like
    Sorbet and Steep. Since 2019, we have been developing the tool as one of the key
    features for Ruby 3 static analysis, and now it works with some practical applications.
    In this talk, we briefly explain what and how Type Profiler works, present a roadmap
    and progress of the development, and discuss how useful it is for practical applications
    with some demos.
  materials:
    - title: "Type Profiler: Ambitious Type Inference for Ruby 3"
      url: https://www.slideshare.net/mametter/type-profiler-ambitious-type-inference-for-ruby-3-238384550
  speakers:
  - id: mametter
  video:
    youtube_id: 6KcFdQWp8W0
etagwerker:
  title: 'RubyMem: The Leaky Gems Database for Bundler'
  type: presentation
  language: EN
  description: "Out of memory errors are quite tricky. Our first reaction is always
    the same: \"It can't be my code, it must be one of my dependencies!\" What if
    you could quickly check that with bundler? \n\nIn this talk you will learn about
    memory leaks, out of memory errors, and leaky dependencies. You will learn how
    to use `bundler-leak`, a community-driven, open source tool that will make your
    life easier when debugging memory leaks."
  speakers:
  - id: etagwerker
jeremyevans0:
  title: 'Keyword Arguments: Past, Present, and Future'
  type: presentation
  language: EN
  description: Ruby 3 will separate keyword arguments from positional arguments, which
    causes the biggest backwards compatibility issues in Ruby since Ruby 1.9.  This
    presentation will discuss the history of keyword arguments, how keyword arguments
    are handled internally, how keyword arguments were separated from positional arguments
    internally, and possible future improvements in the handling of keyword arguments.
  speakers:
  - id: jeremyevans0
  video:
    youtube_id: rxJRrccXRfg
kishima:
  title: Now is the time to create your own (m)Ruby computer
  type: presentation
  language: EN
  description: mruby has been known as a good tool for supporting server applications
    and embedded softwares like an IoT application on a small CPU whose resource is
    limited. Now times are changing. mruby gets more power from recent micro processors.
    I believe now Ruby engineers can create their own computer as per their wish.
    Basic process and essential technique how to create an original (m)Ruby computer
    will be shown in the talk with a live demonstration of the computer.
  speakers:
  - id: kishima
  video:
    youtube_id: N24gfQJMXfs
paracycle:
  title: Reflecting on Ruby Reflection for Rendering RBIs
  type: presentation
  language: EN
  description: |-
    As part of our adoption process of Sorbet at Shopify, we needed an automated way to teach Sorbet about our ~400 gem dependencies. We decided to tackle this problem by generating interface files (RBI) for each gem via runtime reflection.

    However, this turns out to not be as simple as it sounds; the flexible nature of Ruby allows gem authors to do many wild things that make this Hard. Come and hear about all the lessons that we learnt about runtime reflection in Ruby while building `tapioca`.
  speakers:
  - id: paracycle
  video:
    youtube_id: OJRQAn6BfpE
yuji_yokoo:
  title: Developing your Dreamcast apps and games with mruby
  type: presentation
  language: EN
  description: |-
    What would you make, if you can run your Ruby code on Dreamcast?

    Well, now you can! I have been working on my development setup for running mruby code on Dreamcast. I would like to show you what I have developed so far and how you can get started. I would also like to tell you why development on Dreamcast is a great idea and share a few things I learned along the way.
  speakers:
  - id: yuji_yokoo
  video:
    youtube_id: oqBTlYUkGXk
shyouhei:
  title: On sending methods
  type: presentation
  language: JA
  description: As you have noticed 2.7 is faster than older ruby versions.  One of
    the main reason for this is my optimisation around method invocations.  Let me
    share what was suboptimal, and how was that fixed.
  speakers:
  - id: shyouhei
  video:
    youtube_id: IAkrGf9XJi0
johnlinvc:
  title: 'mruby-rr: Time Traveling Debugger For mruby Using rr'
  type: presentation
  language: EN
  description: |-
    Debugging bugs that don't happen every time is painful. It needs both technique and luck.
    When dealing with these, a mistyped `continue` command is irreversible and will take us a whole afternoon just to reproduce the issue again.

    [mruby-rr](https://github.com/johnlinvc/mruby-rr) comes to rescue! It's a Time Traveling Debugger for mruby that based on Mozilla's rr. `mruby-rr` supports record and replay of mruby program execution. We can record the tough bug using mruby-rr for just once. Afterwards we can playback the execution as many times as we want. `mruby-rr` can also do time traveling operations like `reverse-next` and evaluating expressions.
  speakers:
  - id: johnlinvc
  video:
    youtube_id: E5ifh9yZCKk
ko1:
  title: Ractor report
  type: presentation
  language: JA
  description: |-
    This talk will introduce Ractor, the concurrency system for Ruby 3 based on actual implementation.

    At RubyKaigi 2016, I proposed Guild ([A proposal of new concurrency model for Ruby 3](http://rubykaigi.org/2016/presentations/ko1.html)) and at RubyKaigi 2018, I introduced prototype of it ([Guild Prototype - RubyKaigi 2018](https://rubykaigi.org/2018/presentations/ko1.html)). For Ruby 3, we renamed Guild to Ractor and finished the first implementation. This talk will introduce Ractor API with current implementation.
  speakers:
  - id: ko1
  video:
    youtube_id: 40t8EPpnujg
jonatas:
  title: 'Live coding: Grepping Ruby code like a boss'
  type: presentation
  language: EN
  description: |-
    Our favorite language allows us to implement the same code in a few different ways. Because of that, it becomes tough to search and find the target code only with regular expressions.

    I'd like to present fast, a searching DSL that can help you build complex
    searches directly in the AST nodes as regexes does for plain strings.

    The presentation will be a live coding tour of how to use the tool and create your searching patterns.

    I'll also show how to manipulate the code in the target AST nodes,
    allowing us to refactor the source code in an automated way.
    I'll share a few funny stories about how I refactored thousands of files in a week.
  speakers:
  - id: jonatas
  video:
    youtube_id: YczrZQC9aP8
hasumikin:
  title: 'mruby machine: An Operating System for Microcontoller'
  type: presentation
  language: EN
  description: |-
    There are different approaches to make an operating system.

    I take an approach which takes advantage of mruby/c's VM then makes my own mruby compiler and shell program.

    Though my purpose is making an useful and effective development platform for microcontroller with Ruby, I will also share some universal knowledge on how to make an OS with you.
  speakers:
  - id: hasumikin
  video:
    youtube_id: kDOf_tZKlLU
shugomaeda:
  title: Magic is organizing chaos
  type: presentation
  language: JA
  description: |-
    The power of Law (e.g., type signatures, type checkers, type profilers) is growing toward Ruby 3.
    We need the power of Chaos for the Cosmic Balance.

    In this talk, I propose Proc#using to extend area where Refinements can be used.
  speakers:
  - id: shugomaeda
  video:
    youtube_id: QKiQiK7gSHQ
youchan:
  title: Asynchronous Opal
  type: presentation
  language: JA
  description: |-
    Opal is a compiler convert from Ruby to JavaScript. JavaScript has async/await syntax for asynchronous processing.
    But Opal hasn't implemented it yet.
    The Opal community had been discussed mapping `Fiber` semantics to JavaScript async/await. The conclusion was it is impossible to map coroutine such as `Fiber` because async/await is just a syntax sugar that expresses nested callbacks into flat statements.
    I'm going to talk about the idea I'm trying to incorporate easy-to-use asynchronous processing into Opal.
  speakers:
  - id: youchan
  video:
    youtube_id: yDUmMuPdSUA
elct9620:
  title: Is it time run Ruby on Web via WebAssembly?
  type: presentation
  language: EN
  description: The W3C is starting to recommend to use WebAssembly, and we can compile
    mruby to WebAssembly very easy in now day. But we have Opal and it works well,
    we really need to use WebAssembly? Let me share my experience about trying to
    add mruby to HTML5 game, and discuss the pros and cons when we use Ruby in WebAssembly
    way in Web.
  speakers:
  - id: elct9620
  video:
    youtube_id: PJLWoz6K7w4
jimlock:
  title: 'msgraph: Microsoft Graph API Client with Ruby'
  type: presentation
  language: JA
  description: |-
    [msgraph](https://github.com/jinroq/msgraph) is the unofficial Microsoft Graph API Client with Ruby.
    The official Microsoft Graph Client Library for Ruby is [microsoft_graph](https://rubygems.org/gems/microsoft_graph). However, since its release on August 1, 2016, the preview version has been continued and has not been maintained. So, I created an API client that I can maintain on my own.

    In this talk, I will talk about why I created the unofficial API Client.
  speakers:
  - id: jimlock
  video:
    youtube_id: TrVhnrTPtoI
m_seki:
  title: Rinda in the real-world embedded systems.
  type: presentation
  language: JA
  description: |-
    Okayama Astrophysical Observatory Wide-Field Camera (OAOWFC), is an autonomous wide-field near-infrared camera and has been in operation since 2015. A distributed control system is operated via control software using Rinda.
    I report the implementation of the robot telescope 🤖🔭.
  speakers:
  - id: m_seki
  video:
    youtube_id: qwe6qmtxHbk
eregontp:
  title: Running Rack and Rails Faster with TruffleRuby
  type: presentation
  language: EN
  description: |-
    Optimizing Rack and Rails applications with a just-in-time (JIT) compiler is a challenge. For example, MJIT does not speed up Rails currently.
    TruffleRuby tackles this challenge. We have been running the Rails Simpler Benchmarks with TruffleRuby and now achieve higher performance than any other Ruby implementation.

    In this talk we’ll show how we got there and what TruffleRuby optimizations are useful for Rack and Rails applications.
    TruffleRuby is getting ready to speed up your applications, will you try it?
  speakers:
  - id: eregontp
  video:
    youtube_id: 281YdMYRAsk
koic:
  title: Road to RuboCop 1.0
  type: presentation
  language: JA
  description: "RuboCop 1.0 is coming soon.\n\nRuboCop 1.0 introduces several new
    features and breaking changes to go to the stable major version 1.0!\nIn this
    presentation, I will talk about how the milestones for RuboCop 1.0 has been implemented. For
    examples, gemified departments, safe annotate, new cop status, and others. \n\nRuboCop
    1.0 will provide the safest static analysis in the all‐time previous releases.
    The pragmatic meaning of them has emerged during the implementation process. This
    talk will help you ride on RuboCop 1.0."
  speakers:
  - id: koic
  video:
    youtube_id: jkY7J9k6mHs
tenderlove:
  title: Don't @ me!  Instance Variable Performance in Ruby
  type: presentation
  language: JA
  description: 'How do instance variables work?  We''ve all used instance variables
    in our programs, but how do they actually work?  In this presentation we''ll look
    at how instance variables are implemented in Ruby.  We''ll start with a very strange
    benchmark, then dive in to Ruby internals to understand why the code behaves the
    way it does.  Once we''ve figured out this strange behavior, we''ll follow up
    with a patch to increase instance variable performance.  Be prepared for a deep
    dive in to a weird area of Ruby, and remember: don''t @ me!'
  speakers:
  - id: tenderlove
  video:
    youtube_id: 4ysxA8DDplQ
rubylangorg:
  title: Ruby Committers vs the World
  type: discussion
  language: JA
  description: Ruby core all stars on stage!
  speakers:
  - id: rubylangorg
palkan_tula:
  title: The whys and hows of transpiling Ruby
  type: presentation
  language: EN
  description: |-
    Transpiling is a source-to-source compiling. Why might we need it in Ruby? Compatibility and experiments.

    Ruby is evolving fast nowadays. The latest MRI release introduced, for example, the pattern matching syntax. Unfortunately, not everyone is ready to use it yet: gems authors have to support older versions, Ruby implementations are lagging. And it's still experimental, which raises the question: how to evaluate proposals? By backporting them to older Rubies!

    I want to discuss these problems and share the story of the Ruby transpiler — Ruby Next. A decent amount of Ruby hackery is guaranteed.
  speakers:
  - id: palkan_tula
  video:
    youtube_id: zLInIisYlDo
kddeisz:
  title: Prettier Ruby
  type: presentation
  language: EN
  description: |-
    Prettier was created in 2017 and has since seen a meteoric rise within the JavaScript community. It differentiated itself from other code formatters and linters by supporting minimal configuration, eliminating the need for long discussions and arguments by enforcing an opinionated style on its users. That enforcement ended up resonating well, as it allowed developers to get back to work on the more important aspects of their job.

    Since then, it has expanded to support other languages and markup, including Ruby. The Ruby plugin is now in use in dozens of applications around the world, and better formatting is being worked on daily. This talk will give you a high-level overview of prettier and how to wield it in your project. It will also dive into the nitty gritty, showing how the plugin was made and how you can help contribute to its growth. You’ll come away with a better understanding of Ruby syntax, knowledge of a new tool and how it can be used to help your team.
  speakers:
  - id: kddeisz
  video:
    youtube_id: 3945FmGGHhw
ioquatix:
  title: Don't Wait For Me! Scalable Concurrency for Ruby 3!
  type: presentation
  language: EN
  description: We have proven that fibers are useful for building scalable systems.
    In order to develop this further, we need to add hooks into the various Ruby VMs
    so that we can improve the concurrency of existing code without changes. There
    is an outstanding PR for this work, but additional effort is required to bring
    this to completion and show its effectiveness in real world situations. We will
    discuss the implementation of this PR, the implementation of the corresponding
    Async Scheduler, and how they work together to improve the scalability of Ruby
    applications.
  speakers:
  - id: ioquatix
  video:
    youtube_id: Y29SSOS4UOc
ktou:
  title: Goodbye fat gem
  type: presentation
  language: JA
  description: Fat gem mechanism is useful to install extension library without any
    compiler. Fat gem mechanism is especially helpful for Windows rubyists because
    Windows rubyists don't have compiler. But there are some downsides. For example,
    fat gem users can't use Ruby 2.7 (the latest Ruby) until fat gem developers release
    a new gem for Ruby 2.7. As of 2020, pros of fat gem mechanism is decreasing and
    cons of it is increasing. This talk describes the details of pros and cons of
    it then says thanks and goodbye to fat gem.
  speakers:
  - id: ktou
  video:
    youtube_id: tGZiCqyMU_g
hsbt:
  title: Dependency Resolution with Standard Libraries
  type: presentation
  language: JA
  description: "I maintain the RubyGems, Bundler and the standard libraries of the
    Ruby language. So, I have a plan to make all of the standard libraries to default
    gems at Ruby 3. In the past, I described the detail of default gems and bundled
    gems at RubyKaigi and the Ruby conferences in the world. But the users still confused
    the differences standard libraries and default/bundled gems.\n\nAfter releasing
    Ruby 3, We need to learn about the dependency is not only \"Versioning\" with
    default gems. It caused by the between library and library over the versioning.
    For that reason, I need to describe the motivation of \"Promoting/Demoting the
    Default Gems or Bundle Gems\" continuously. You will learn the resolution mechanism
    on RubyGems/Bundler and the standard libraries of the Ruby language with my talk. "
  speakers:
  - id: hsbt
  video:
    youtube_id: wvayhyTEL_k
miura1729:
  title: Ruby to C Translator by AI
  type: presentation
  language: JA
  description: |-
    I am developing Ruby to C Translator  "MMC". This uses AI (i.e. Abstract Interpretation) for Type Profiling and Escape Analysis. MMC generates very efficient C code  by AI. For example , MMC gains about 50 times faster than CRuby for ao-bench  (faster than C version).
    I will presentation the technical detail of MMC especially escape analysis.
  speakers:
  - id: miura1729
  video:
    youtube_id: kr2RXLoiLNA
aycabta:
  title: The Complex Nightmare of the Asian Cultural Area
  type: presentation
  language: EN
  description: |-
    There are many different cultures in Asia that seem odd to the rest of the world. This session introduces the complexities of the current situation and the various technologies that have been created to achieve their goals.
  speakers:
  - id: aycabta
  video:
    youtube_id: s7Zc7VJMBv8
soutaro:
  title: The State of Ruby 3 Typing
  type: presentation
  language: EN
  description: |-
    Ruby 3 will ship with a new feature for type checking, RBS. It provides a language to describe types of Ruby programs, the type declarations for standard library classes, and a set of features to support using and developing type checkers. In this talk, I will introduce the feature and how the Ruby programming will be with RBS.
  speakers:
  - id: soutaro
  video:
    youtube_id: PvkpW1OEaP8
