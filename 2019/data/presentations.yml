---
yukihiro_matz:
  title: The Year of Concurrency
  type: keynote
  language: JA
  description: The Matz keynote!
  speakers:
  - id: yukihiro_matz
  video:
    youtube_id: WZu-WVzbEOA
matzbot:
  title: Ruby 3 Progress Report
  type: presentation
  language: JA
  description: Ruby 3 progress report
  speakers:
  - id: matzbot
  video:
    youtube_id: 1qEhEad5uPI
k0kubun:
  title: Performance Improvement of Ruby 2.7 JIT in Real World
  type: presentation
  language: JA
  description: |-
    Ruby 2.6's JIT was known to make a Rails application slower, while it achieved a good progress on some other benchmarks.

    Will that be beneficial for your application in Ruby 2.7? How many times will it make Rails faster? How much additional memory will it consume? Come to the talk and figure it out.
  speakers:
  - id: k0kubun
  materials:
  - title: Performance Improvement of Ruby 2.7 JIT in Real World / RubyKaigi 2019
    url: https://speakerdeck.com/k0kubun/rubykaigi-2019
  video:
    youtube_id: bz-sy5b2EXY
maciejmensfeld:
  title: How to take over a Ruby gem
  type: presentation
  language: EN
  description: |-
    Using Ruby gems is safe, right? We're a nice community of friendly beings that act towards the same goal: making Ruby better. But is that true? Can we just blindly use libraries, without making sure, that they are what they are supposed to be?

    Come and learn how you can take over a gem, what you can do with it once you have it and what you can do to protect yourself against several types of attacks you're exposed to on a daily basis. Let's exploit the Ruby gems world, and its data together.
  speakers:
  - id: maciejmensfeld
  materials:
  - title: How to take over a Ruby gem
    url: https://mensfeld.github.io/taking-over-a-gem/
  video:
    youtube_id: wePVhZeZTNM
aycabta:
  title: Terminal Editors For Ruby Core Toolchain
  type: presentation
  language: EN
  description: |-
    I implemented "Reline" that is a compatibility library with "readline" stdlib by pure Ruby and works correctly without GNU Readline and works on Windows too.

    "Reidline" is authored for new IRB by keiju-san who is Ruby's grandfather, it behaves as a multiline editor like JavaScript console on browsers. It had many technical problems but I've already solved that when I implemented Reline. So I helped to complete Reidline.

    These are highlights of Ruby 2.7. I'll talk about the technical problems of these and show a demo on Ruby 2.7.
  speakers:
  - id: aycabta
  materials:
  - title: 'IRB Reboot: Modernize Implementation and Features - ITOYANAGI Sakura'
    url: https://slide.rabbit-shocker.org/authors/aycabta/rubykaigi-2019/
  video:
    youtube_id: 8l1ep4nN_KQ
ota42y:
  title: How to use OpenAPI3 for API developer
  type: presentation
  language: JA
  description: |-
    I'll talk about how to use OpenAPI 3 and another tools in production.

    JSON is widely used in the current Web.
    But the request / response format is not in the JSON specification, so we can't guarantee.

    In the case of developing API servers for backend server and multiple servers like micro services,
    guaranteeing the request / response format is improve for stability and development efficiency.
    So the definition of schema is important.

    OpenAPI 3 (formerly Swagger) is a specification for describing the interface of RESTful API.
    We can define request / response parameters schema for the endpoint using it.

    The committee is gem which validates request / response in rack layer.
    I'm developing the function to perform validation using OpenAPI 3 in this gem.
    And I shifted my application specification to OpenAPI3 from another schema specification called JSON Hyper-Schema.
  speakers:
  - id: ota42y
  materials:
  - title: How to use OpenAPI3 for API developer (RubyKaigi 2019)
    url: https://speakerdeck.com/ota42y/how-to-use-openapi3-for-api-developer-rubykaigi-2019
  video:
    youtube_id: om1dgTbmXrw
ko1:
  title: Write a Ruby interpreter in Ruby for Ruby 3
  type: presentation
  language: EN
  description: Ruby interpreter called MRI (Matz Ruby Interpreter) or CRuby is written
    in C language. Writing an interpreter in C has several advantages, such as performance
    at early development, extensibility in C language and so on. However, now we have
    several issues because of writing MRI in C. To overcome this issue, I propose
    to rewrite some part of MRI in Ruby language with C functions. It will be a base
    of Ruby 3 (or Ruby 2.7). In this talk, I'll show the issues and how to solve them
    with writing Ruby, how to write MRI internal in Ruby and how to build an interpreter
    with Ruby code.
  speakers:
  - id: ko1
  materials:
  - title: Write a Ruby interpreter in Ruby for Ruby 3
    url: http://www.atdot.net/~ko1/activities/2019_rubykaigi2019.pdf
  video:
    youtube_id: PZDhXPgt98U
nateberkopec:
  title: 'Determining Ruby Process Counts: Theory and Practice'
  type: presentation
  language: EN
  description: You have a Ruby web application or service that takes a certain number
    of requests per minute. How do you know how many Ruby processes you will need
    to serve that load? The answer is actually very complex, and getting it wrong
    can cost you a lot of money! In this talk, we'll go through the mathematics and
    theory of queues, and then apply them to the configuration and provisioning of
    Ruby services (web, background job, and otherwise). Finally, we'll discuss the
    application of this theory in the real world, including multi-threading and the
    GVL, "autoscaling", containers and deployment processes, and how Guilds may impact
    this process in the future.
  speakers:
  - id: nateberkopec
  materials:
  - title: 'Determining Ruby Process Counts: Theory and Practice'
    url: https://github.com/speedshop/rubykaigi2019/blob/master/presentation.pdf
  video:
    youtube_id: BE5C2ydN0y0
giosakti:
  title: Pathfinder - Building a Container Platform in Ruby Ecosystem
  type: presentation
  language: EN
  description: |-
    This session will discuss about an attempt to build container platform in ruby/mruby ecosystem, the current situation and lesson-learned that we can discern to improve it further.

    Further on, for those whom are unfamiliar, this session will also touch a bit about container platform/orchestrator and the generic architecture behind it. So that as a developer, we understand the abstraction that it provides.
  speakers:
  - id: giosakti
  materials:
  - title: Pathfinder - Building a Container Platform in Ruby Ecosystem
    url: https://speakerdeck.com/giosakti/pathfinder-building-a-container-platform-in-ruby-ecosystem
  video:
    youtube_id: AhBds1xGT94
joker1007:
  title: Pragmatic Monadic Programing in Ruby
  type: presentation
  language: JA
  description: |-
    Ruby is not only for Objective Oriented Programming style, but also for Functional Programming style.
    I talk how ruby expresses important essences of Functional Programming.
    For example, Functor, Applicative, Monad.

    And Monadic syntax suger is very important to take advantage of Monad.
    I also talk about Implementation of Monadic syntax suger that is inspired by Scala language.
    I will show popular monad implementations like belows.
    - Maybe
    - Either
    - State
    - Future (like async syntax in JavaScript)
    - Parser Combinator
  speakers:
  - id: joker1007
  materials:
  - title: Pragmatic Monadic Programming in Ruby
    url: https://speakerdeck.com/joker1007/pragmatic-monadic-programming-in-ruby
  video:
    youtube_id: xUV2DvZ5L1A
mametter:
  title: A Type-level Ruby Interpreter for Testing and Understanding
  type: presentation
  language: JA
  description: |-
    We propose a type-level abstract interpreter for Ruby 3's static analysis.
    This interpreter runs normal (i.e., non-type-annotated) Ruby programs in "type" level: each variable has only a type instead of a value.
    It reports a possible type-error bug, e.g., attempting to call a unknown method or to pass an invalid type argument during the interpretation.
    By recording all method definitions and calls, it also creates a summary of the program structure in type signature format.
    This is useful to understand the code, and can be also used as a prototype of type definition for external type checkers.
  speakers:
  - id: mametter
  materials:
  - title: A Type-level Ruby Interpreter for Testing and Understanding
    url: https://www.slideshare.net/mametter/a-typelevel-ruby-interpreter-for-testing-and-understanding
  video:
    youtube_id: 2oDBKrPYEu8
alehander42:
  title: Compiling Ruby to idiomatic code in static languages
  type: presentation
  language: EN
  description: "Generating code and compiling code are very useful, but usually the
    target is the machine: so the generated code is very unfriendly for programmers.
    We will show two approaches with which we are able to compile Ruby to code in
    statically typed languages and make it idiomatic and nice\n\npseudocode-like(where
    we support small programs in a subset of Ruby, but we can generate correct statically
    typed code in C++, C#, Go, Java) and \n\nrealcode-like, where we infer ruby types
    on runtime and autotranslate more complicated codebase to Nim(rb2nim): the result
    requires some manual work, but automates most of it."
  speakers:
  - id: alehander42
  - id: zah
  video:
    youtube_id: hlWCp210IIY
  materials:
  - title: Compiling Ruby to idiomatic code in static languages
    url: https://metacraft-labs.github.io/fast-rubocop/ruby-kaigi-2019/#/
gsamokovarov:
  title: Writing Debuggers in Plain Ruby! Fact or fiction?
  type: presentation
  language: EN
  description: |-
    In this talk, we'll build a simple byebug-like debugger in plain Ruby. We'll try to go all the way, but also explain what we cannot do without some C or Java code.

    Let's imagine a Ruby future, where a debugger written in Ruby can be used in CRuby, JRuby and even TruffleRuby!
  speakers:
  - id: gsamokovarov
  materials:
  - title: Writing Debuggers in Plain Ruby! Fact or fiction?
    url: http://kaigi-debuggers-in-ruby.herokuapp.com/
  video:
    youtube_id: vV_tZX7jooo
youchan:
  title: Ruby for NLP
  type: presentation
  language: JA
  description: |-
    There is no doubt that Deep Learning was the spark of the recent AI boom.
    Deep Learning has been improving the field of image recognition and natural language processing.
    In this presentation, I will explain how to deal with natural language processing in Ruby
    In the first half I will explain the basic methodology of natural language processing and in the second half I will explain how to deal with Ruby.
  speakers:
  - id: youchan
  materials:
  - title: Ruby for NLP
    url: http://youchan.org/RubyKaigi2019/
  video:
    youtube_id: nzPwSDRsv_0
ioquatix:
  title: Fibers Are the Right Solution
  type: presentation
  language: EN
  description: The majority of performance improvements in modern processors are due
    to increased core count rather than increased instruction execution frequency.
    To maximise hardware utilization, applications need to use multiple processes
    and threads. Servers that process discrete requests are a good candidate for both
    parallelization and concurrency improvements. We discuss different ways in which
    servers can improve processor utilization and how these different approaches affect
    application code. We show that fibers require minimal changes to existing application
    code and are thus a good approach for retrofitting existing systems.
  speakers:
  - id: ioquatix
  materials:
  - title: Fibers Are the Right Solution
    url: https://www.codeotaku.com/journal/2018-11/fibers-are-the-right-solution/index
  video:
    youtube_id: qKQcUDEo-ZI
_matthewd:
  title: 'A Bundle of Joy: Rewriting for Performance'
  type: presentation
  language: EN
  description: Local gem management is a key part of our modern workflow, but our
    tools are layered on historical approaches and requirements. In this talk we explore
    a ground-up rewrite of local gem management, and ask whether careful implementation
    (and some feature-cutting) can produce a tool that meets most people's needs while
    outperforming the current options. In the process, we'll look at specific design
    choices that make common operations faster, and which might apply to your projects
    too.
  speakers:
  - id: _matthewd
  video:
    youtube_id: fQBrWrJKPVU
nusco:
  title: A Deep Learning Adventure
  type: presentation
  language: EN
  description: |-
    Deep learning is the most exciting recent idea in software–but it's also intimidating. If you have no previous machine learning and deep learning experience, this talk is your entry ticket to the field.

    We'll start from scratch, with a look at supervised learning. Then we'll see Ruby code that trains a neural network. Finally, we'll talk about deep neural networks, and explore a wonderful new concept that's changing the field of computer graphics: Generation Adversarial Networks. See how a deep learning program can invent imaginary animals!
  speakers:
  - id: nusco
  video:
    youtube_id: Uj-7X-9lkIg
watson1978:
  title: RMagick, migrate to ImageMagick 7
  type: presentation
  language: JA
  description: |-
    The currently RMagick has some problems about installing on macOS/Windows platform.
    I will talk about RMagick that it will be migrated from ImageMagick 6 to 7 and it will be solved the problems.
  speakers:
  - id: watson1978
  materials:
  - title: 'RMagick, migrate to ImageMagick 7 #RubyKaigi #RubyKaigi2019'
    url: https://speakerdeck.com/watson/rmagick-migrate-to-imagemagick-7-number-rubykaigi-number-rubykaigi2019
  video:
    youtube_id: Wt9eR8sj9s8
k_tsj:
  title: Pattern matching - New feature in Ruby 2.7
  type: presentation
  language: JA
  description: Ruby core team plans to introduce pattern matching as an experimental
    feature in Ruby 2.7. In this presentation, we will talk about the current proposed
    syntax and its design policy.
  speakers:
  - id: k_tsj
  materials:
  - title: Pattern matching - New feature in Ruby 2.7
    url: https://speakerdeck.com/k_tsj/pattern-matching-new-feature-in-ruby-2-dot-7
  video:
    youtube_id: paBlgsqoKk8
alexwwood:
  title: Building Serverless Applications in Ruby with AWS Lambda
  type: presentation
  language: EN
  description: Come join us and learn about how you can build serverless applications
    using Ruby on AWS Lambda! We will demonstrate how to create Ruby serverless functions
    for web APIs as well as for event-driven applications, then build, test and deploy
    them to production. We'll also discuss general best practices for developing serverless
    applications.
  speakers:
  - id: alexwwood
  video:
    youtube_id: OA7jwECjvRY
gao_shawnee:
  title: 'GraphQL Migration: A Proper Use Case for Metaprogramming?'
  type: presentation
  language: EN
  description: "When my team took the plunge to migrate Square’s largest Ruby app
    to GraphQL, no way were we going to manually redefine over 200 objects. Implementing
    a GraphQL layer includes repetitive and straightforward processes that can be
    expedited with metaprogramming. \nI will start with some GraphQL basics, then
    dig into process of metaprogramming a GraphQL layer from a demo ruby server. I
    will explain the benefits of using this design pattern and how it improves developer
    experience. At the end, I will demo the server handling a set diverse and complex
    client calls! "
  speakers:
  - id: gao_shawnee
  materials:
  - title: 'GraphQL Migration: A Use Case for Metaprogramming?'
    url: https://speakerdeck.com/shawneegao/ruby-kaigi-slides
  video:
    youtube_id: GKj4dipBEts
tenderlove:
  title: Compacting GC for MRI v2
  type: presentation
  language: JA
  description: In this talk we will cover an implementation for a compacting GC in
    MRI.  MRI's implementation presents unique challenges for implementing a compacting
    GC.  In this talk, we will cover compactor implementation and algorithms, challenges
    presented by MRI's implementation, compaction reference verification, and results
    of compactor benchmarks.
  speakers:
  - id: tenderlove
  materials:
  - title: Compacting GC in MRI v2
    url: https://speakerdeck.com/tenderlove/compacting-gc-in-mri-v2
  video:
    youtube_id: HgAZsg7D_Jo
nagachika:
  title: All bugfixes are incompatibilities
  type: keynote
  language: JA
  description: Keynote
  speakers:
  - id: nagachika
  materials:
  - title: All bugfixes are incompatibilities
    url: https://www.slideshare.net/nagachika/all-bugfixes-are-incompatibilities
  video:
    youtube_id: g_wPQzNlu9Q
samphippen:
  title: How RSpec works
  type: presentation
  language: EN
  description: |-
    RSpec is a much beloved series of libraries, currently holding spots 1, 2, 4, 5, and 6 in terms of most downloaded gems. Many of us use it every day, but the question is, how does it work?

    In this talk, you will learn about how RSpec executes your tests, the anatomy of an `expect(...).to ...` expression, and how stubs and mocks work. You'll learn deeply about the behind the scenes architecture of RSpec. This talk is quite technical, and a fair amount of Ruby knowledge is assumed.
  speakers:
  - id: samphippen
  materials:
  - title: How RSpec Works
    url: https://speakerdeck.com/penelope_zone/how-rspec-works
  video:
    youtube_id: B8yKlTNlY5E
codefolio:
  title: 'Six Years of Ruby Performance: A History'
  type: presentation
  language: EN
  description: Ruby keeps getting faster. And people keep asking, "but how fast is
    it for Rails?" Rails makes a great way to measure Ruby's speed, and how Ruby has
    changed version-by-version. Let's look at six years of performance graphs for
    apps big and small. How fast is 2.6.0? With JIT? How close is Ruby 3x3?
  speakers:
  - id: codefolio
  materials:
  - title: Six Years of Ruby Performance History
    url: https://bit.ly/kaigi2019-gibbs
  video:
    youtube_id: iy4N7AtzZYc
hasumikin:
  title: Practical mruby/c firmware development with CRuby
  type: presentation
  language: EN
  description: |-
    Writing mruby/c firmware applications is like writing mrbgems. You need to make some C functions and mruby wrapper of them in order to handle peripherals like sensor, flash memory or BLE.
    Easy to imagine it's hard to develop for a team in a situation of TIGHT COUPLING, right?
    I will talk about some tools, mrubyc-test and mrubyc-debugger, which I made with CRuby for testing and debugging to keep our team slack coupling.
  speakers:
  - id: hasumikin
  materials:
  - title: Practical mruby/c firmware development with CRuby - HASUMI Hitoshi
    url: https://slide.rabbit-shocker.org/authors/hasumikin/RubyKaigi-2019/
  video:
    youtube_id: rl0Nfiqs4e0
ktou:
  title: Better CSV processing with Ruby 2.6
  type: presentation
  language: JA
  description: |-
    csv, one of the standard libraries, in Ruby 2.6 has many improvements:

      * Default gemified
      * Faster CSV parsing
      * Faster CSV writing
      * Clean new CSV parser implementation for further improvements
      * Reconstructed test suites for further improvements
      * Benchmark suites for further performance improvements

    These improvements are done without breaking backward compatibility.

    This talk describes details of these improvements by a new csv maintainer.
  speakers:
  - id: ktou
  - id: 284km
  materials:
  - title: Better CSV processing with Ruby 2.6 - Kouhei Sutou
    url: https://slide.rabbit-shocker.org/authors/kou/rubykaigi-2019/
  video:
    youtube_id: z8yV3yEqxJY
Hir0_IC:
  title: intimate Chat with Matz and mruby developers about mruby
  type: presentation
  language: JA
  description: 3 or 4 developers including overseas developer are going to talk about
    mruby's development confidential stories, current situation, and future of mruby
    with Yukihio "Matz" Matsumoto creator of the mruby programming language.
  speakers:
  - id: Hir0_IC
  materials:
  - title: Chat with Matz about mruby in Rubykaigi2019
    url: https://www.slideshare.net/Hir0IC/chat-with-matz-about-mruby-in-rubykaigi2019
  video:
    youtube_id: Mf4v3u6tgOk
fxn:
  title: 'Zeitwerk: A new code loader'
  type: presentation
  language: EN
  description: |
    The talk presents Zeitwerk, a new code loader for gems and applications.

    Zeitwerk is able to preload, lazy load, unload, and eager load the code of gems and applications with a compatible file structure without the need to write require calls.
  speakers:
  - id: fxn
  materials:
  - title: 'Zeitwerk: A new code loader'
    url: https://speakerdeck.com/fxn/zeitwerk-a-new-code-loader
  video:
    youtube_id: YSc_GNQP6ts
Envek:
  title: 'Yabeda: Monitoring monogatari'
  type: presentation
  language: EN
  description: |-
    Developing large and high load application without monitoring is a hard and dangerous task, just like piloting an aircraft without gauges. Why it is so important to keep an eye on how application's “flight“ goes, what things you should care more, and how graphs may help to resolve occurring performance problems quickly.
    On an example of Sidekiq, Prometheus, and Grafana, we will learn how to take metrics from the Ruby application, what can we see from their visualization, and I will tell a couple of sad tales about how it helps in everyday life (with happy-end!)
  speakers:
  - id: Envek
  materials:
  - title: 'RubyKaigi 2019: Yabeda: monitoring monogatari'
    url: https://speakerdeck.com/envek/rubykaigi-2019-yabeda-monitoring-monogatari
  video:
    youtube_id: CvjefIat8yE
yhara:
  title: 'Ovto: Frontend web framework for Rubyists'
  type: presentation
  language: JA
  description: |-
    What framework do you use for creating single-page webapps? React, Vue, Angular, etc...
    If you're tired of wirting JavaScript, Ovto may be a good choice.
    In this talk, I will in introduce Ovto, a frontend framework which allows you to write single-page webapps all in Ruby.
    https://github.com/yhara/ovto
  speakers:
  - id: yhara
  video:
    youtube_id: Vu2z8krSAYs
  materials:
  - title: 'Ovto: Frontend web framework for Rubyists'
    url: https://speakerdeck.com/yhara/ovto-frontend-web-framework-for-rubyists
jez:
  title: 'State of Sorbet: A Type Checker for Ruby'
  type: presentation
  language: EN
  description: |-
    We have developed a typesystem for Ruby at Stripe with a goal of helping developers understand code better, write code with more confidence, and detect+prevent significant classes of bugs.

    This talk shares experience of Stripe successfully adopting Sorbet in our codebase which had millions lines of code that were written before the typechecker had been conceived. The talk will describe:
    - the process used to add typing to existing code;
    - many tools developed to support this process;
    - impact of this type system on safety and productivity at Stripe.

    We also have some exciting announcements!

    The talk does not require any previous knowledge of types and should be accessible to a broad audience.
  speakers:
  - id: jez
  - id: ptarjan
  materials:
  - title: 'State of Sorbet: A Type Checker for Ruby'
    url: https://sorbet.run/talks/RubyKaigi2019/
  video:
    youtube_id: odmlf_ezsBo
grosser:
  title: Actionable Code Coverage
  type: presentation
  language: EN
  description: |-
    No more external tools / unclear percentage scores / slow PR feedback.

    Code coverage at your fingertips while developing, by having tests fail when newly added code is missing coverage, with minimal overhead and great visibility.

     - how code coverage works in ruby (regular vs branch vs oneshot)
     - how single_cov keeps things fast and simple
     - onboarding for small and large codebases (automated onboarding + divide & conquer)
     - how to hack forked code coverage with forking-test-runner
     - wishlist for coverage.so
  speakers:
  - id: grosser
  materials:
  - title: Actionable Code Coverage
    url: https://grosser.github.io/ruby-coverage-talk
  video:
    youtube_id: 01LYb28rMUQ
mrkn_workshop:
  title: RubyData Workshop
  type: presentation
  language: JA
  description: |-
    In this session, we'd like to introduce the current state of our data science ecosystems for Ruby.

    This session consists of the following four parts.

    1. In the first part, mrkn will talk about the whole summary.
    2. In the second part, kou and people from Red Data Tools project will introduce this project and its current status.
    3. In the third part, kozo2 will explain his achievements of RubyGrant 2018.
    4. In the last part, Kazuma Furuhashi will explain his achievements of RubyGrant 2018.
  speakers:
  - id: mrkn
  - id: 284km
  - id: kozo2
  - id: ktou
  - id: znz
  video:
    youtube_id: PFcpmbRgB5A
shugomaeda:
  title: Terminal curses
  type: presentation
  language: JA
  description: |-
    Terminal programming with curses is useful and fun, but it sometimes brings terminal curses.

    This talk shows basics of terminals (e.g., real text terminals, terminal emulators, the controlling terminal, /dev/tty and con, pty, control characters, escape sequences, termcap/terminfo, terminal mode), pros and cons of text-based user interfaces, an introduction to curses.gem, its applications, and issues you'll face when programming with curses.
  speakers:
  - id: shugomaeda
  video:
    youtube_id: 67M6Deo2aTw
vnmakarov:
  title: A light weight JIT compiler project for CRuby
  type: presentation
  language: EN
  description: |2-
      JITs based on GCC/LLVM as recently introduced CRuby MJIT might be heavy and slow for some environments and applications.  CRuby MJIT needs two tier compilation with a light weight compiler used as a tier 1 JIT compiler.

      This talk will be about the light weight JIT compiler project for CRuby MJIT. The talk will cover the project motivations, current and future state of the project.
  speakers:
  - id: vnmakarov
  materials:
  - title: The light-weight-jit-compiler-project-for-c ruby
    url: https://www.slideshare.net/VladimirMakarov13/the-lightweightjitcompilerprojectforc-ruby-141836482
  video:
    youtube_id: FdWLXKvZ6Gc
amirrajan:
  title: Building a game for the Nintendo Switch using Ruby
  type: presentation
  language: EN
  description: Amir Rajan has done something insane. He released a Nintendo Switch
    game written entirely in mRuby and C. Amir will share his journey with you from
    the inception of A Dark Room Switch, it's integration with libSDL, all the way
    to the submission to his publisher. Hopefully, Amir will inspire others to pursue
    game development projects of their own using Ruby.
  speakers:
  - id: amirrajan
  materials:
  - title: Game Dev + Ruby = Happiness? Part II
    url: http://slides.com/amirrajan/game-dev-ruby-happiness-part-2#/
  video:
    youtube_id: o0d4sjcUfCg
p0deje:
  title: 'Crystalball: predicting test failures'
  type: presentation
  language: EN
  description: "Tests are often slow and are a bottleneck in development. We build
    complex CI systems with heavy parallelization to reduce the amount of time it
    takes to run all the tests, but we still tend to run all of them even for the
    slightest change in code. What if instead, we could run only the tests that might
    fail as a result of our changes? In a world of static languages, it's not hard,
    but Ruby is very flexible and dynamic language so implementing this idea is tricky.
    \n\nMeet [Crystalball](https://toptal.github.io/crystalball/) - a regression test
    selection library we built in Toptal. I'll demonstrate how to use it with RSpec,
    how it predicts what tests to run and how it can be extended."
  speakers:
  - id: p0deje
  materials:
  - title: 'Crystalball: predicting test failures'
    url: https://speakerdeck.com/p0deje/crystalball-predicting-test-failures
  video:
    youtube_id: q2q-9Td71kE
udzura:
  title: The fastest way to bootstrap Ruby on Rails
  type: presentation
  language: EN
  description: |-
    Ruby on Rails applications sometimes take too long time in bootstrapping, especially when the application is complicated, monolithic or "legacy" one. This inhibits Kubernetes or other orchestrators to do smooth autoscaling.
    There are tecnologies such as bootsnap to solve this problem. In addition to them, I propose new storategy - "checkpoint and restore".  I used CRIU(Checkpoint and Restore In Userspace) in Linux environment to make "ahead of time" process dump, and boot the application from image to reduce the bootstrap time. In my case, observed bootstrap time is reduced from about 2,500ms to 1,200ms.
    I will describe what the CRIU is in the first place, use cases where CRIU is effective and some problems using CRIU.
  speakers:
  - id: udzura
  materials:
  - title: The fastest way to bootstrap Ruby on Rails
    url: https://speakerdeck.com/udzura/the-fastest-way-to-bootstrap-ruby-on-rails
  video:
    youtube_id: pmlUq5fNkzA
estolfo:
  title: Benchmarking your code, inside and out
  type: presentation
  language: EN
  description: |-
    Benchmarking is an important component of writing applications, gems, Ruby implementations, and everything in between. There is never a perfect formula for how to measure the performance of your code, as the requirements vary from codebase to codebase.
    Elastic has an entire team dedicated to measuring the performance of Elasticsearch and the clients team has worked with them to build a common benchmarking framework for itself. This talk will explore how the Elasticsearch Ruby Client is benchmarked and highlight key elements that are important for any benchmarking framework.
  speakers:
  - id: estolfo
  materials:
  - title: Benchmarking the Elasticsearch clients
    url: https://drive.google.com/open?id=1n2wPr_hqqEGZVts1s2yQ5pGbUoC-ohdX
  video:
    youtube_id: WOnxe6qWtzY
nirvdrum:
  title: 'Beyond `puts`: TruffleRuby’s Modern Debugger Using Chrome'
  type: presentation
  language: EN
  description: |-
    We all write bugs. How quickly we can identify & understand them depends on the quality of our tools.

    In this talk you'll be introduced to TruffleRuby's modern debugger, based on the Chrome browser's DevTools Protocol. TruffleRuby's uniquely powerful set of tools let you debug, profile, and inspect the memory usage of Ruby code, native extensions, and other embedded languages all at the same time. Support for those tools is zero-overhead so you can have them always enabled. I'll show you how it all works and how it lets you step through Ruby code, inspect local variables, evaluate expressions, and more.
  speakers:
  - id: nirvdrum
  materials:
  - title: 'Beyond `puts`: TruffleRuby’s Modern Debugger Using Chrome'
    url: https://speakerdeck.com/nirvdrum/beyond-puts-trufflerubys-modern-debugger-using-chrome
  video:
    youtube_id: pe28r1VSBdU
MikeMcQuaid:
  title: 'Building Homebrew in Ruby: The Good, Bad and Ugly'
  type: presentation
  language: EN
  description: Homebrew is a popular macOS package manager in the Ruby community and
    is also written in Ruby. As Homebrew isn't a web application and doesn't provide
    a Ruby library, the Ruby ecosystem works great for us in some ways and less great
    in others. Learn about things we love, hate and struggle with because Homebrew
    is built in Ruby.
  speakers:
  - id: MikeMcQuaid
  video:
    youtube_id: m1P_06bjjCs
  materials:
  - title: Building Homebrew in Ruby
    url: https://speakerdeck.com/mikemcquaid/building-homebrew-in-ruby
tanaka_akr:
  title: What is Domain Specific Language?
  type: presentation
  language: JA
  description: |-
    Ruby is known as a good language for DSL (Domain Specific Language).
    However, it is unclear what differentiate internal DSL and normal library.
    This presentation tries to explain the difference.
    Both DSL and normal library solves part of programmers task.
    They tries to make programming easier.
    However, DSL tends to use some kind of black magic unlike normal library.
    The black magic is used to realize succinct and easy-to-read program for
    many applications in the domain.
    I hope this presentation makes programmers aware to design good library.
  speakers:
  - id: tanaka_akr
  video:
    youtube_id: 9S6RK0AGzng
rubylangorg:
  title: Ruby Committers vs the World
  type: discussion
  language: JA
  description: 'Ruby core committers on stage!

    '
  speakers:
  - id: rubylangorg
  video:
    youtube_id: 5eAXAUTtNYU
yuri_at_earth:
  title: "(partially) Non-volatile mruby"
  type: presentation
  language: JA
  description: |-
    In RubyKaigi 2018, I talked about basic idea of putting mruby on ROM.
    But there’s still some objects consuming RAM, such as IREP structure and libraries defined in Ruby.
    In this session, I will give another solution for the problem to put more structures into ROM.
    Moreover, I will explain about the change of implementation of instance variables and Hash class in mruby 2.0, and the effect of memory consumption.
  speakers:
  - id: yuri_at_earth
  - id: takahashim
  materials:
  - title: "(partially) Non-volatile mruby"
    url: https://speakerdeck.com/yamanekko/partially-non-volatile-mruby
  video:
    youtube_id: N-TGgiNp5u0
zelivans:
  title: Fuzzing native Ruby code with Kisaten
  type: presentation
  language: EN
  description: |-
    Fuzzing is a common technique used to discover bugs and vulnerabilities in code. In order to fuzz native Ruby code, I've built [Kisaten](https://github.com/twistlock/kisaten), a Ruby extension for MRI that uses the magic of one of the best fuzzers of the time, `american fuzzy lop`. With Kisaten I found bugs in the Ruby standard library (in rdoc and rexml) and in popular gems like mail, asciidoctor and rubyzip. And there is still much more to fuzz!

    I plan to walk through its development process from a Rubyist point of view, and present how it can be used so you can fuzz your own code.
  speakers:
  - id: zelivans
  materials:
  - title: Fuzzing native Ruby code with Kisaten
    url: https://www.twistlock.com/wp-content/uploads/2019/04/RubyKaigi2019.pdf
searls:
  title: The Selfish Programmer
  type: presentation
  language: EN
  description: |-
    Using Ruby at work is great… but sometimes it feels like a job!

    This year, I rediscovered the joy of writing Ruby apps for nobody but myself—and you can, too! Solo development is a great way to learn skills, to find inspiration, and to distill what matters most about programming.

    Building an entire app by yourself can be overwhelming, but this talk will make it easier. We'll start with a minimal toolset that one person can maintain. You'll learn how many "bad" coding practices can actually reduce complexity. You may be surprised how selfish coding can make you a better team member, too!
  speakers:
  - id: searls
  materials:
  - title: The Selfish Programmer on Vimeo
    url: https://vimeo.com/331528433/88176d4f3c
  video:
    youtube_id: LVe0g91yZ84
riseshia:
  title: Cleaning up a huge ruby application
  type: presentation
  language: JA
  description: |-
    (JA)
    プロジェクトに顕在している未使用のコードを消すのは難しいです。
    その理由としては特定コードを消していいのか確信を持ちづらいこと、そして実際削除可能なコードを探す作業は作業効率が悪いということなどが上げられます。
    クックパッドでも未使用コードを削除しているのですが、上記のような問題がありこれらを解決するためにコードの修正履歴を利用したコード監視や、本番環境の実行履歴からの未使用コード探すなど仕組みを導入しています。

    この発表ではコード削除業の意義や面倒さを説明し、そして1年で現行のサービスのクローズなしで5万行以上のコードを消せた経験を共有します。

    (EN)
    Deleting unused code from a huge project is hard.
    Because it's difficult to:

    - get confidence whether we could delete it or not.
    - find potential unused codes is cost-inefficient task.

    We has cleaned up unused codes, and introduced the stuffs such as logging code execution on the production environment, monitoring the code changes for solving these problems.

    In this talk, I will explain why cleaning up codes is needed, why it's troublesome, and describe our experience how we deleting more than 50,000 lines codes without closing any services.
  speakers:
  - id: riseshia
  materials:
  - title: Cleaning up a huge ruby application
    url: https://speakerdeck.com/riseshia/cleaning-up-a-huge-ruby-application
  video:
    youtube_id: 4akNWMKVZQU
soutaro:
  title: The challenges behind Ruby type checking
  type: presentation
  language: JA
  description: |-
    Static type checking for Ruby is challenging because the language is dynamically typed. What exactly is the source of the difficulty? You might think of *duck typing* or `defime_method`? Totally! But not only them are the reason. In fact, only a few lines of typical and innocent looking Ruby code can make type checking much more complicated than you assume.

    This talk is about the difficulties and type system extensions to make the type checking possible. Static type checking is not easy and requires unfamiliar type system features, but we can do that.
  speakers:
  - id: soutaro
  materials:
  - title: The challenges behind Ruby type checking
    url: https://speakerdeck.com/soutaro/the-challenges-behind-ruby-type-checking
  video:
    youtube_id: 7N-QOx6cVI4
headius:
  title: 'JRuby: The Road to Ruby 2.6 and Rails 6'
  type: presentation
  language: EN
  description: 'Over the past six months, the JRuby team has been working on filling
    in edges: getting refinements working well, porting C extensions, and getting
    well-known applications running. At the same time, we always try to push forward
    on performance and general compatibility. In this talk, we''ll cover recent work
    to support Rails 6 and Ruby 2.6. We''ll show off a major Rails application running
    on JRuby. And we''ll show you how you can help us keep JRuby moving forward.'
  speakers:
  - id: headius
  - id: tom_enebo
  materials:
  - title: 'JRuby: The Road to Ruby 2.6 and Rails 6'
    url: https://speakerdeck.com/headius/jruby-the-road-to-ruby-2-dot-6-and-rails-6
  video:
    youtube_id: vPy5KO4uHuA
PeterQuines:
  title: Running Ruby On The Apple II
  type: presentation
  language: EN
  description: |-
    An 8-bit CPU running at 1 megahertz. Kilobytes of RAM. The Apple II was released in the 1970's and many people first learned to program on it using the built in BASIC. Surely it is impossible to fit a language as complicated as Ruby on such a limited machine… right?

    Come see Ruby running where it has never run before, and learn how such a rich language can be squeezed down to fit on the humble Apple II.
  speakers:
  - id: PeterQuines
  materials:
  - title: Running Ruby On The Apple ][
    url: https://github.com/justcolin/conference_talks/blob/master/ruby_on_the_apple_ii__rubykaigi_2019/README.md
  video:
    youtube_id: qiwpWHfyXpM
sue445:
  title: Best practices in web API client development
  type: presentation
  language: JA
  description: |-
    How many did you make web API clients?

    I have made web API clients as OSS, but I have made more private web API clients (not OSS) than that. (total 10+ gems)

    Everyone should have used an external web service web API to create something.

    Sometimes, you may need to create a client to use private web APIs that are not publicly exposed.

    I would like to introduce the best practices of making web API clients.

     I think that designing a good API client will lead to a good gem design, so I believe that my talk is beneficial not only for API client developers but also gem developers.
  speakers:
  - id: sue445
  materials:
  - title: 'Best practices in web API client development #RubyKaigi'
    url: https://speakerdeck.com/sue445/best-practices-in-web-api-client-development-number-rubykaigi
  video:
    youtube_id: Ry0uQeTCHHs
hsbt:
  title: The future of the Bundled Bundler with RubyGems
  type: presentation
  language: JA
  description: |-
    I did merge Bundler into Ruby core repository and shipped bundler as standard library on Ruby 2.6. It helps to preparation of the fresh Ruby install and easy to use gem and bundle commands.

    In background, we have a lot of issues until done to merge bundler into ruby core. This presentation show the some of issues of it works that are test suite, rubygems integration and library ecosystem like heroku. You can understand the internal of library management by rubygems and bundler.

    Finally, I'm going to show the integration plan of RubyGems and Bundler and the part of  its implements. Also I will show the issues of the current status. You can resolve them after my talk.
  speakers:
  - id: hsbt
  materials:
  - title: The Future of Bundled Bundler
    url: https://www.slideshare.net/hsbt/the-future-of-bundled-bundler
  video:
    youtube_id: H4rsTfJw9A4
kddeisz:
  title: Pre-evaluation in Ruby
  type: presentation
  language: EN
  description: |-
    Ruby is historically difficult to optimize due to features that improve flexibility and productivity at the cost of performance. Techniques like Ruby's new JIT compiler and deoptimization code help, but still are limited by techniques like monkey-patching and binding inspection.

    Pre-evaluation is another optimization technique that works based on user-defined contracts and assumptions. Users can opt in to optimizations by limiting their use of Ruby's features and thereby allowing further compiler work.

    In this talk we'll look at how pre-evaluation works, and what benefits it enables.
  speakers:
  - id: kddeisz
  materials:
  - title: Pre-evaluation in Ruby
    url: https://speakerdeck.com/kddnewton/pre-evaluation-in-ruby
  video:
    youtube_id: q3i5pYpxP-s
m_seki:
  title: dRuby 20th anniversary hands-on workshop
  type: presentation
  language: JA
  description: |-
    dRuby (distributed ruby) is a cool library bone in the 20th century.

    In this session, we will learn the basics of dRuby. Experience distributed objects on your PC.

    Please download (or print) the document. (V0.7)
    → http://www.druby.org/fukuoka2019.pdf
  speakers:
  - id: m_seki
  video:
    youtube_id: 6BJLGr_M30g
frsyuki:
  title: Performance Optimization Techniques of MessagePack-Ruby
  type: presentation
  language: JA
  description: |-
    MessagePack is known as one of the world's fastest object serialization formats available with compatibility to JSON. MessagePack is fast not just because of its binary format but also because of VERY optimized implementations crafted by enthusiasts for each programming languages.
    To be the fastest serialization library for Ruby, MessagePack-Ruby implements various performance optimization techniques. This session explains the techniques with numbers and discusses further possible optimizations.
  speakers:
  - id: frsyuki
  video:
    youtube_id: yn5mEH8dUIY
mrkn:
  title: Reducing ActiveRecord memory consumption using Apache Arrow
  type: presentation
  language: JA
  description: |-
    The `pluck` method provided in ActiveRecord is a platform to obtain one or few field values as an array or arrays from a database.  The `pluck` method, compared with finder methods, can considerably reduce memory consumption because it does not generate model instances.

    In this talk, I would like to introduce my new approach to reduce the memory consumption of ActiveRecord.  This approach employs Apache Arrow as the internal data representation of an `ActiveRecord::Result` object.  This approach can achieve a remarkable reduction of the memory consumption of the `pluck` method; it is 2-12x efficient than the original implementation.
  speakers:
  - id: mrkn
  materials:
  - title: Reducing ActiveRecord memory consumption using Apache Arrow
    url: https://speakerdeck.com/mrkn/reducing-activerecord-memory-consumption-using-apache-arrow
  video:
    youtube_id: c1Y5o4tgblQ
tongueroo:
  title: Ruby Serverless Framework
  type: presentation
  language: EN
  description: Learn how to run Ruby applications on AWS Lambda with a Serverless
    Framework specifically designed with Ruby.  Demo is provided. We deploy it to
    AWS Lambda with a single command.
  speakers:
  - id: tongueroo
  video:
    youtube_id: a0VKbrgzKso
ujm:
  title: Play with local vars
  type: presentation
  language: EN
  description: |-
    This 40min talk is only about Ruby's local variables. I'm not going to talk about anything else.

    I'll demonstrate, or more precisely, play with Ruby local variables, including a discussion about the following common pitfall:

    ```ruby
    eval 'a = 1'
    eval 'p a' #=> NameError!
    ```

    Ruby has multiple different types of variables: global vars, instance vars, class vars, constants, local vars, and pseudo vars such as self. Identifiers without sigils such as @ are considered either local vars, methods, method arguments, block parameters, pseudo variables, or other reserved words. Particularly important aspect I believe is that Ruby intentionally tries to make local vars and methods indistinguishable for human. This talk focuses only on local vars among other variables or methods.

    * Keywords: parse.y, binding, yarv iseq, continuation, flip-flop operator, regular expression, and gdb

    Oh by the way, the whole presentation is likely going to be done inside my Vim.
  speakers:
  - id: ujm
  materials:
  - title: Play with local vars
    url: https://gist.github.com/ujihisa/bf0c24f8200533d89300a67be217ee39
  video:
    youtube_id: oNJyBZ5OAMw
n0kada:
  title: Timezone API
  type: presentation
  language: JA
  description: |-
    The Time, a core class, supports timezone since Ruby 2.6.
    This talk will give what the API is, and how it is determined to cooperate with existing external libraries.
  speakers:
  - id: n0kada
  video:
    youtube_id: AjQUCWeh9sQ
shyouhei:
  title: The send-pop optimisation
  type: presentation
  language: JA
  description: '"Sending a method to an object, then discarding its return value immediately"
    is one of the most frequent operations that ruby does.  By eliminating such wastes
    of time and memory, ruby execution could be much more efficient.  I will share
    you some stories and outcomes of my journey trying to optimise that part.'
  speakers:
  - id: shyouhei
  materials:
  - title: The send-pop optimisation
    url: https://speakerdeck.com/shyouhei/the-send-pop-optimisation
  video:
    youtube_id: rH81nlm1lcE
pitr_ch:
  title: 'TruffleRuby: Wrapping up compatibility for C extensions'
  type: presentation
  language: EN
  description: |-
    We think it is crucial that any alternative Ruby implementation aiming to be fully compatible with MRI runs the C extensions. TruffleRuby's compatibility was recently significantly improved, with much better support that almost completely removes the need to patch C extensions.

    In this talk you will hear and see: how the old approach to C extensions worked and where and why it was failing short; how does the new approach work and how much closer it brings TruffleRuby to its goal to be a drop-in replacement for MRI.

    We have been interpreting the C extensions (and JITing together with Ruby code) for a while, however we have been passing the Ruby objects directly into the C code which had lead to problems. We now have a new innovative technique which no longer requires patches in almost all cases. The objects are wrapped for greater compatibility and there is a virtual GC marking phase to avoid memory leaks.
  speakers:
  - id: pitr_ch
  materials:
  - title: 'TruffleRuby: Wrapping up compatibility for C extensions'
    url: https://speakerdeck.com/pitr_ch/truffleruby-wrapping-up-compatibility-for-c-extensions
  video:
    youtube_id: R-vInXwpPPg
oceanicpanda:
  title: Working towards Bundler 3
  type: presentation
  language: EN
  description: "Bundler hit a big milestone this year with the release of Bundler
    2 \U0001F389, but not without its bumps and hurdles. We'll look into the problems
    that some of our users have been experiencing after the Bundler 2 release, what
    the core team has been doing to fix these issues and what we've since learned.
    Afterwards, We'll look at the upcoming Bundler 2.1 and Bundler 3 releases."
  speakers:
  - id: oceanicpanda
  materials:
  - title: Working towards Bundler 3
    url: https://speakerdeck.com/colby/working-towards-bundler-3
  video:
    youtube_id: m_KTuPuEmQ0
sonots:
  title: 'Red Chainer and Cumo: Practical Deep Learning in Ruby'
  type: presentation
  language: JA
  description: |-
    We will introduce Red Chainer which is a deep learning framework purely written in Ruby and Cumo which is GPU aware fast numerical library for Ruby, and talk about their evolutions.

    In this talk, we describe:

    * Current status about Deep Learning and Scientific Computing in Ruby.
    * Introduction about [Red Chainer](https://github.com/red-data-tools/red-chainer) project.
    * Introduction of the ONNX data format, and automatic generation of Ruby codes by supporting ONNX with Red Chainer.
    * Introduction about [Cumo](https://github.com/sonots/cumo) project, and its support in Red Chainer.
    * Recent updates about supporting Fast Convolutional Neural Networks in Red Chainer.

    Also, @sonots talks about [ChainerX](https://chainer.org/announcement/2018/12/03/chainerx.html) and a plan to make a further faster deep learning with its ruby bindings.
  speakers:
  - id: sonots
  - id: hatappi
  materials:
  - title: 'Red Chainer and Cumo: Practical Deep Learning in Ruby at RubyKaigi 2019'
    url: https://speakerdeck.com/sonots/red-chainer-and-cumo-practical-deep-learning-in-ruby-at-rubykaigi-2019
  video:
    youtube_id: PdHcIn51B7Y
jeremyevans0:
  title: Optimization Techniques Used by the Benchmark Winners
  type: keynote
  language: EN
  description: Sequel and Roda have dominated TechEmpower's independent benchmarks
    for Ruby web frameworks for years.  This presentation will discuss optimizations
    that Sequel and Roda use, and how to use similar approaches to improve the performance
    of your own code.
  speakers:
  - id: jeremyevans0
  materials:
  - title: Optimization Techniques Used by the Benchmark Winners
    url: http://code.jeremyevans.net/presentations/rubykaigi2019/index.html
  video:
    youtube_id: RuGZCcEL2F8
